
Assignment1PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000090  08002ebc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002ebc  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093ff  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001598  00000000  00000000  000294bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004581  00000000  00000000  0002bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074a5  00000000  00000000  000301f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c45c  00000000  00000000  00037696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  00093b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002cf0 	.word	0x08002cf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002cf0 	.word	0x08002cf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e07c      	b.n	8000386 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800028c:	2201      	movs	r2, #1
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	fa02 f303 	lsl.w	r3, r2, r3
 8000294:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	4013      	ands	r3, r2
 800029e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d16b      	bne.n	8000380 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d003      	beq.n	80002b8 <GPIO_Init+0x48>
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d134      	bne.n	8000322 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	2103      	movs	r1, #3
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	401a      	ands	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	795b      	ldrb	r3, [r3, #5]
 80002d6:	4619      	mov	r1, r3
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	431a      	orrs	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	2301      	movs	r3, #1
 80002f4:	408b      	lsls	r3, r1
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4013      	ands	r3, r2
 80002fe:	b29a      	uxth	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	799b      	ldrb	r3, [r3, #6]
 800030e:	4619      	mov	r1, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	b29b      	uxth	r3, r3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4313      	orrs	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	b29b      	uxth	r3, r3
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	401a      	ands	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	4619      	mov	r1, r3
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	f67f af7f 	bls.w	800028c <GPIO_Init+0x1c>
    }
  }
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2202      	movs	r2, #2
 80003b6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	71da      	strb	r2, [r3, #7]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	8a1b      	ldrh	r3, [r3, #16]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	4013      	ands	r3, r2
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f0:	2301      	movs	r3, #1
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	e001      	b.n	80003fa <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
 8000414:	4613      	mov	r3, r2
 8000416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000418:	787b      	ldrb	r3, [r7, #1]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800041e:	887a      	ldrh	r2, [r7, #2]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000424:	e002      	b.n	800042c <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	887a      	ldrh	r2, [r7, #2]
 800042a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
 8000444:	4613      	mov	r3, r2
 8000446:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000450:	787a      	ldrb	r2, [r7, #1]
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000460:	887b      	ldrh	r3, [r7, #2]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b29b      	uxth	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3208      	adds	r2, #8
 800046c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000470:	887b      	ldrh	r3, [r7, #2]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	210f      	movs	r1, #15
 800047a:	fa01 f303 	lsl.w	r3, r1, r3
 800047e:	43db      	mvns	r3, r3
 8000480:	8879      	ldrh	r1, [r7, #2]
 8000482:	08c9      	lsrs	r1, r1, #3
 8000484:	b289      	uxth	r1, r1
 8000486:	4608      	mov	r0, r1
 8000488:	ea02 0103 	and.w	r1, r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f100 0208 	add.w	r2, r0, #8
 8000492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000496:	887b      	ldrh	r3, [r7, #2]
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b29b      	uxth	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3208      	adds	r2, #8
 80004a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3208      	adds	r2, #8
 80004b8:	68b9      	ldr	r1, [r7, #8]
 80004ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	230f      	movs	r3, #15
 80004de:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	78db      	ldrb	r3, [r3, #3]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d03a      	beq.n	800055e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <NVIC_Init+0xc0>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	43db      	mvns	r3, r3
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	f003 0307 	and.w	r3, r3, #7
 80004f4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f1c3 0304 	rsb	r3, r3, #4
 80004fc:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	fa22 f303 	lsr.w	r3, r2, r3
 8000506:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	461a      	mov	r2, r3
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4013      	ands	r3, r2
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	4313      	orrs	r3, r2
 8000524:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800052c:	4a18      	ldr	r2, [pc, #96]	; (8000590 <NVIC_Init+0xc4>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	6979      	ldr	r1, [r7, #20]
 8000534:	b2c9      	uxtb	r1, r1
 8000536:	4413      	add	r3, r2
 8000538:	460a      	mov	r2, r1
 800053a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000546:	4912      	ldr	r1, [pc, #72]	; (8000590 <NVIC_Init+0xc4>)
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	0952      	lsrs	r2, r2, #5
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000552:	2201      	movs	r2, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000558:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800055c:	e00f      	b.n	800057e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000566:	490a      	ldr	r1, [pc, #40]	; (8000590 <NVIC_Init+0xc4>)
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7812      	ldrb	r2, [r2, #0]
 800056c:	0952      	lsrs	r2, r2, #5
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000572:	2201      	movs	r2, #1
 8000574:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000576:	f100 0320 	add.w	r3, r0, #32
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800057e:	bf00      	nop
 8000580:	371c      	adds	r7, #28
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	e000e100 	.word	0xe000e100

08000594 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000594:	b480      	push	{r7}
 8000596:	b08b      	sub	sp, #44	; 0x2c
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005bc:	4b91      	ldr	r3, [pc, #580]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f003 030c 	and.w	r3, r3, #12
 80005c4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	d011      	beq.n	80005f0 <RCC_GetClocksFreq+0x5c>
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d837      	bhi.n	8000642 <RCC_GetClocksFreq+0xae>
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d003      	beq.n	80005e0 <RCC_GetClocksFreq+0x4c>
 80005d8:	6a3b      	ldr	r3, [r7, #32]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d004      	beq.n	80005e8 <RCC_GetClocksFreq+0x54>
 80005de:	e030      	b.n	8000642 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a89      	ldr	r2, [pc, #548]	; (8000808 <RCC_GetClocksFreq+0x274>)
 80005e4:	601a      	str	r2, [r3, #0]
      break;
 80005e6:	e030      	b.n	800064a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a87      	ldr	r2, [pc, #540]	; (8000808 <RCC_GetClocksFreq+0x274>)
 80005ec:	601a      	str	r2, [r3, #0]
      break;
 80005ee:	e02c      	b.n	800064a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80005f0:	4b84      	ldr	r3, [pc, #528]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005f8:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80005fa:	4b82      	ldr	r3, [pc, #520]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000602:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	0c9b      	lsrs	r3, r3, #18
 8000608:	3302      	adds	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d105      	bne.n	800061e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	4a7d      	ldr	r2, [pc, #500]	; (800080c <RCC_GetClocksFreq+0x278>)
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
 800061c:	e00d      	b.n	800063a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800061e:	4b79      	ldr	r3, [pc, #484]	; (8000804 <RCC_GetClocksFreq+0x270>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800062a:	4a77      	ldr	r2, [pc, #476]	; (8000808 <RCC_GetClocksFreq+0x274>)
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800063e:	601a      	str	r2, [r3, #0]
      break;
 8000640:	e003      	b.n	800064a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a70      	ldr	r2, [pc, #448]	; (8000808 <RCC_GetClocksFreq+0x274>)
 8000646:	601a      	str	r2, [r3, #0]
      break;
 8000648:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800064a:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <RCC_GetClocksFreq+0x270>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000652:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	091b      	lsrs	r3, r3, #4
 8000658:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800065a:	4a6d      	ldr	r2, [pc, #436]	; (8000810 <RCC_GetClocksFreq+0x27c>)
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	40da      	lsrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000672:	4b64      	ldr	r3, [pc, #400]	; (8000804 <RCC_GetClocksFreq+0x270>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800067a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000682:	4a63      	ldr	r2, [pc, #396]	; (8000810 <RCC_GetClocksFreq+0x27c>)
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	40da      	lsrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800069a:	4b5a      	ldr	r3, [pc, #360]	; (8000804 <RCC_GetClocksFreq+0x270>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80006a2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	0adb      	lsrs	r3, r3, #11
 80006a8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80006aa:	4a59      	ldr	r2, [pc, #356]	; (8000810 <RCC_GetClocksFreq+0x27c>)
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	40da      	lsrs	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80006ca:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006cc:	6a3b      	ldr	r3, [r7, #32]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80006d2:	4a50      	ldr	r2, [pc, #320]	; (8000814 <RCC_GetClocksFreq+0x280>)
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d006      	beq.n	80006f6 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80006e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	e003      	b.n	80006fe <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <RCC_GetClocksFreq+0x270>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000706:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800070e:	4a41      	ldr	r2, [pc, #260]	; (8000814 <RCC_GetClocksFreq+0x280>)
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000716:	b29b      	uxth	r3, r3
 8000718:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	fbb2 f2f3 	udiv	r2, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	e003      	b.n	800073a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <RCC_GetClocksFreq+0x270>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b10      	cmp	r3, #16
 8000744:	d003      	beq.n	800074e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <RCC_GetClocksFreq+0x274>)
 800074a:	619a      	str	r2, [r3, #24]
 800074c:	e003      	b.n	8000756 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <RCC_GetClocksFreq+0x270>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	2b20      	cmp	r3, #32
 8000760:	d003      	beq.n	800076a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <RCC_GetClocksFreq+0x274>)
 8000766:	61da      	str	r2, [r3, #28]
 8000768:	e003      	b.n	8000772 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <RCC_GetClocksFreq+0x270>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800077a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800077e:	d10d      	bne.n	800079c <RCC_GetClocksFreq+0x208>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	429a      	cmp	r2, r3
 8000788:	d108      	bne.n	800079c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	d104      	bne.n	800079c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	005a      	lsls	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	621a      	str	r2, [r3, #32]
 800079a:	e003      	b.n	80007a4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007b0:	d10d      	bne.n	80007ce <RCC_GetClocksFreq+0x23a>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d108      	bne.n	80007ce <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d104      	bne.n	80007ce <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	005a      	lsls	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
 80007cc:	e003      	b.n	80007d6 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d104      	bne.n	80007ec <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
 80007ea:	e029      	b.n	8000840 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <RCC_GetClocksFreq+0x270>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10f      	bne.n	8000818 <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000800:	e01e      	b.n	8000840 <RCC_GetClocksFreq+0x2ac>
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	007a1200 	.word	0x007a1200
 800080c:	003d0900 	.word	0x003d0900
 8000810:	20000000 	.word	0x20000000
 8000814:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000818:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b02      	cmp	r3, #2
 8000822:	d104      	bne.n	800082e <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
 800082c:	e008      	b.n	8000840 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	2b03      	cmp	r3, #3
 8000838:	d102      	bne.n	8000840 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a5e      	ldr	r2, [pc, #376]	; (80009b8 <RCC_GetClocksFreq+0x424>)
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000840:	4b5c      	ldr	r3, [pc, #368]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000848:	2b00      	cmp	r3, #0
 800084a:	d104      	bne.n	8000856 <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
 8000854:	e021      	b.n	800089a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000856:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800085e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000862:	d104      	bne.n	800086e <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
 800086c:	e015      	b.n	800089a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800087a:	d104      	bne.n	8000886 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
 8000884:	e009      	b.n	800089a <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800088e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000892:	d102      	bne.n	800089a <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a48      	ldr	r2, [pc, #288]	; (80009b8 <RCC_GetClocksFreq+0x424>)
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
 80008ae:	e021      	b.n	80008f4 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80008b0:	4b40      	ldr	r3, [pc, #256]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80008bc:	d104      	bne.n	80008c8 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
 80008c6:	e015      	b.n	80008f4 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80008c8:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80008d4:	d104      	bne.n	80008e0 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
 80008de:	e009      	b.n	80008f4 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80008e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80008ec:	d102      	bne.n	80008f4 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <RCC_GetClocksFreq+0x424>)
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
 8000908:	e021      	b.n	800094e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000916:	d104      	bne.n	8000922 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
 8000920:	e015      	b.n	800094e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800092a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800092e:	d104      	bne.n	800093a <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
 8000938:	e009      	b.n	800094e <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000942:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000946:	d102      	bne.n	800094e <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <RCC_GetClocksFreq+0x424>)
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000962:	e021      	b.n	80009a8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800096c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000970:	d104      	bne.n	800097c <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
}
 800097a:	e015      	b.n	80009a8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000988:	d104      	bne.n	8000994 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000992:	e009      	b.n	80009a8 <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <RCC_GetClocksFreq+0x420>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800099c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80009a0:	d102      	bne.n	80009a8 <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <RCC_GetClocksFreq+0x424>)
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009a8:	bf00      	nop
 80009aa:	372c      	adds	r7, #44	; 0x2c
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	007a1200 	.word	0x007a1200

080009bc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <RCC_AHBPeriphClockCmd+0x3c>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4909      	ldr	r1, [pc, #36]	; (80009f8 <RCC_AHBPeriphClockCmd+0x3c>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80009da:	e006      	b.n	80009ea <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <RCC_AHBPeriphClockCmd+0x3c>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <RCC_AHBPeriphClockCmd+0x3c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	614b      	str	r3, [r1, #20]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a10:	69da      	ldr	r2, [r3, #28]
 8000a12:	4909      	ldr	r1, [pc, #36]	; (8000a38 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a1a:	e006      	b.n	8000a2a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	61cb      	str	r3, [r1, #28]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a2d      	ldr	r2, [pc, #180]	; (8000b08 <TIM_TimeBaseInit+0xcc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00f      	beq.n	8000a78 <TIM_TimeBaseInit+0x3c>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <TIM_TimeBaseInit+0xd0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d00b      	beq.n	8000a78 <TIM_TimeBaseInit+0x3c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a66:	d007      	beq.n	8000a78 <TIM_TimeBaseInit+0x3c>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <TIM_TimeBaseInit+0xd4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d003      	beq.n	8000a78 <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <TIM_TimeBaseInit+0xd8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d108      	bne.n	8000a8a <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a7e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	885a      	ldrh	r2, [r3, #2]
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <TIM_TimeBaseInit+0xdc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00c      	beq.n	8000aac <TIM_TimeBaseInit+0x70>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <TIM_TimeBaseInit+0xe0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d008      	beq.n	8000aac <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	891a      	ldrh	r2, [r3, #8]
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	89fa      	ldrh	r2, [r7, #14]
 8000ab0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <TIM_TimeBaseInit+0xcc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d00f      	beq.n	8000aea <TIM_TimeBaseInit+0xae>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <TIM_TimeBaseInit+0xd0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d00b      	beq.n	8000aea <TIM_TimeBaseInit+0xae>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <TIM_TimeBaseInit+0xe4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d007      	beq.n	8000aea <TIM_TimeBaseInit+0xae>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <TIM_TimeBaseInit+0xe8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d003      	beq.n	8000aea <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <TIM_TimeBaseInit+0xec>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d104      	bne.n	8000af4 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	7a9b      	ldrb	r3, [r3, #10]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	615a      	str	r2, [r3, #20]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	40013400 	.word	0x40013400
 8000b10:	40000400 	.word	0x40000400
 8000b14:	40000800 	.word	0x40000800
 8000b18:	40001000 	.word	0x40001000
 8000b1c:	40001400 	.word	0x40001400
 8000b20:	40014000 	.word	0x40014000
 8000b24:	40014400 	.word	0x40014400
 8000b28:	40014800 	.word	0x40014800

08000b2c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	729a      	strb	r2, [r3, #10]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d008      	beq.n	8000b84 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000b82:	e007      	b.n	8000b94 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	801a      	strh	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8000baa:	2300      	movs	r3, #0
 8000bac:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	885b      	ldrh	r3, [r3, #2]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	e001      	b.n	8000bc4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	889b      	ldrh	r3, [r3, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d102      	bne.n	8000bd2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	81bb      	strh	r3, [r7, #12]
 8000bd0:	e001      	b.n	8000bd6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d11c      	bne.n	8000c18 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	8859      	ldrh	r1, [r3, #2]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	889a      	ldrh	r2, [r3, #4]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	891b      	ldrh	r3, [r3, #8]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f8af 	bl	8000d4e <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	88db      	ldrh	r3, [r3, #6]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f846 	bl	8000c88 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	891b      	ldrh	r3, [r3, #8]
 8000c00:	89ba      	ldrh	r2, [r7, #12]
 8000c02:	89f9      	ldrh	r1, [r7, #14]
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f8e2 	bl	8000dce <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	88db      	ldrh	r3, [r3, #6]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f851 	bl	8000cb8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000c16:	e01b      	b.n	8000c50 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	8859      	ldrh	r1, [r3, #2]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	889a      	ldrh	r2, [r3, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	891b      	ldrh	r3, [r3, #8]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8d2 	bl	8000dce <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	88db      	ldrh	r3, [r3, #6]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f841 	bl	8000cb8 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	891b      	ldrh	r3, [r3, #8]
 8000c3a:	89ba      	ldrh	r2, [r7, #12]
 8000c3c:	89f9      	ldrh	r1, [r7, #14]
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f885 	bl	8000d4e <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	88db      	ldrh	r3, [r3, #6]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f81c 	bl	8000c88 <TIM_SetIC1Prescaler>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f023 020c 	bic.w	r2, r3, #12
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	619a      	str	r2, [r3, #24]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cfa:	787b      	ldrb	r3, [r7, #1]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000d0c:	e007      	b.n	8000d1e <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	43d2      	mvns	r2, r2
 8000d16:	b292      	uxth	r2, r2
 8000d18:	401a      	ands	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	611a      	str	r2, [r3, #16]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b087      	sub	sp, #28
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	4608      	mov	r0, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	817b      	strh	r3, [r7, #10]
 8000d60:	460b      	mov	r3, r1
 8000d62:	813b      	strh	r3, [r7, #8]
 8000d64:	4613      	mov	r3, r2
 8000d66:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	f023 0201 	bic.w	r2, r3, #1
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8000d90:	893a      	ldrh	r2, [r7, #8]
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4313      	orrs	r3, r2
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f023 030a 	bic.w	r3, r3, #10
 8000da4:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8000da6:	897b      	ldrh	r3, [r7, #10]
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	621a      	str	r2, [r3, #32]
}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b089      	sub	sp, #36	; 0x24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	4611      	mov	r1, r2
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	817b      	strh	r3, [r7, #10]
 8000de0:	460b      	mov	r3, r1
 8000de2:	813b      	strh	r3, [r7, #8]
 8000de4:	4613      	mov	r3, r2
 8000de6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000e0e:	897b      	ldrh	r3, [r7, #10]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8000e1c:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	031b      	lsls	r3, r3, #12
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8000e28:	893b      	ldrh	r3, [r7, #8]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	621a      	str	r2, [r3, #32]
}
 8000e5a:	bf00      	nop
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b089      	sub	sp, #36	; 0x24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d103      	bne.n	8000ed4 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e005      	b.n	8000ee0 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d102      	bne.n	8000ee0 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3308      	adds	r3, #8
 8000ede:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ef2:	e006      	b.n	8000f02 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	400a      	ands	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69da      	ldr	r2, [r3, #28]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00d      	b.n	8000fa2 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d105      	bne.n	8000f98 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4013      	ands	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e004      	b.n	8000fa2 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <USART_GetITStatus+0x8e>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	74fb      	strb	r3, [r7, #19]
 8000fcc:	e001      	b.n	8000fd2 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000fd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	fa02 f103 	lsl.w	r1, r2, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <NVIC_EnableIRQ+0x30>)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <uart_put_char+0x30>)
 8001026:	f7ff ff1e 	bl	8000e66 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800102a:	bf00      	nop
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <uart_put_char+0x30>)
 8001030:	f7ff ff6d 	bl	8000f0e <USART_GetFlagStatus>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f8      	beq.n	800102c <uart_put_char+0x18>
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40004400 	.word	0x40004400

08001048 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e012      	b.n	8001082 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b0a      	cmp	r3, #10
 8001066:	d102      	bne.n	800106e <_write_r+0x26>
            uart_put_char('\r');
 8001068:	200d      	movs	r0, #13
 800106a:	f7ff ffd3 	bl	8001014 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffcc 	bl	8001014 <uart_put_char>
    for (n = 0; n < len; n++) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbe8      	blt.n	800105c <_write_r+0x14>
    }

    return len;
 800108a:	683b      	ldr	r3, [r7, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001098:	4915      	ldr	r1, [pc, #84]	; (80010f0 <USART2_IRQHandler+0x5c>)
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <USART2_IRQHandler+0x60>)
 800109c:	f7ff ff50 	bl	8000f40 <USART_GetITStatus>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d021      	beq.n	80010ea <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <USART2_IRQHandler+0x60>)
 80010a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010aa:	b299      	uxth	r1, r3
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b2d0      	uxtb	r0, r2
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010b8:	7010      	strb	r0, [r2, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	b2c9      	uxtb	r1, r1
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <USART2_IRQHandler+0x68>)
 80010c0:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <USART2_IRQHandler+0x6c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2bff      	cmp	r3, #255	; 0xff
 80010ca:	d107      	bne.n	80010dc <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <USART2_IRQHandler+0x70>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <USART2_IRQHandler+0x70>)
 80010d8:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80010da:	e006      	b.n	80010ea <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <USART2_IRQHandler+0x6c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <USART2_IRQHandler+0x6c>)
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	00050105 	.word	0x00050105
 80010f4:	40004400 	.word	0x40004400
 80010f8:	200001ac 	.word	0x200001ac
 80010fc:	200000ac 	.word	0x200000ac
 8001100:	200001ae 	.word	0x200001ae
 8001104:	200001ad 	.word	0x200001ad

08001108 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001110:	4b86      	ldr	r3, [pc, #536]	; (800132c <uart_init+0x224>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fde7 	bl	8001cec <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800111e:	4b83      	ldr	r3, [pc, #524]	; (800132c <uart_init+0x224>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fde0 	bl	8001cec <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800112c:	4b80      	ldr	r3, [pc, #512]	; (8001330 <uart_init+0x228>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a7f      	ldr	r2, [pc, #508]	; (8001330 <uart_init+0x228>)
 8001132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001136:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001138:	4b7d      	ldr	r3, [pc, #500]	; (8001330 <uart_init+0x228>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a7c      	ldr	r2, [pc, #496]	; (8001330 <uart_init+0x228>)
 800113e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001142:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800114e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001152:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800115e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001162:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800116e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001172:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800117e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001182:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800118e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001192:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800119e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80011a2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80011a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011b0:	f023 030c 	bic.w	r3, r3, #12
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80011b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c0:	8892      	ldrh	r2, [r2, #4]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80011c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011d4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80011d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011e4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80011e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011f4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80011f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001200:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001204:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <uart_init+0x22c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <uart_init+0x22c>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001212:	4b48      	ldr	r3, [pc, #288]	; (8001334 <uart_init+0x22c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a47      	ldr	r2, [pc, #284]	; (8001334 <uart_init+0x22c>)
 8001218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800121c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800121e:	4b45      	ldr	r3, [pc, #276]	; (8001334 <uart_init+0x22c>)
 8001220:	4a44      	ldr	r2, [pc, #272]	; (8001334 <uart_init+0x22c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <uart_init+0x22c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a42      	ldr	r2, [pc, #264]	; (8001334 <uart_init+0x22c>)
 800122c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001230:	f023 030c 	bic.w	r3, r3, #12
 8001234:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <uart_init+0x22c>)
 8001238:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <uart_init+0x22c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <uart_init+0x22c>)
 8001240:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <uart_init+0x22c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <uart_init+0x22c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a3a      	ldr	r2, [pc, #232]	; (8001334 <uart_init+0x22c>)
 800124c:	f043 030c 	orr.w	r3, r3, #12
 8001250:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <uart_init+0x22c>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <uart_init+0x22c>)
 8001258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800125c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <uart_init+0x22c>)
 8001260:	4a34      	ldr	r2, [pc, #208]	; (8001334 <uart_init+0x22c>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800126a:	2300      	movs	r3, #0
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
 800126e:	2300      	movs	r3, #0
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f98c 	bl	8000594 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <uart_init+0x22c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d010      	beq.n	80012ae <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800128c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800128e:	005a      	lsls	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fbb3 f2f2 	udiv	r2, r3, r2
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	fb01 f202 	mul.w	r2, r1, r2
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80012ac:	e00d      	b.n	80012ca <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80012ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80012b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d302      	bcc.n	80012da <uart_init+0x1d2>
        divider++;
 80012d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d6:	3301      	adds	r3, #1
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <uart_init+0x22c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80012f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80012f6:	4013      	ands	r3, r2
 80012f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012fa:	4313      	orrs	r3, r2
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <uart_init+0x22c>)
 8001300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001302:	b292      	uxth	r2, r2
 8001304:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <uart_init+0x22c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <uart_init+0x22c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001312:	2201      	movs	r2, #1
 8001314:	4908      	ldr	r1, [pc, #32]	; (8001338 <uart_init+0x230>)
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <uart_init+0x22c>)
 8001318:	f7ff fdb7 	bl	8000e8a <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 800131c:	2026      	movs	r0, #38	; 0x26
 800131e:	f7ff fe5f 	bl	8000fe0 <NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000002c 	.word	0x2000002c
 8001330:	40021000 	.word	0x40021000
 8001334:	40004400 	.word	0x40004400
 8001338:	00050105 	.word	0x00050105

0800133c <NVIC_EnableIRQ>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f103 	lsl.w	r1, r2, r3
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <NVIC_EnableIRQ+0x30>)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da0b      	bge.n	800139c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <NVIC_SetPriority+0x4c>)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	3b04      	subs	r3, #4
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800139a:	e009      	b.n	80013b0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <NVIC_SetPriority+0x50>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <initLed>:
volatile uint32_t ICValue1 = 0; // Period
volatile uint32_t ICValue2 = 0;	// Duty Cycle
volatile uint8_t  ICValid = 0;

void initLed(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port A
 80013ca:	2101      	movs	r1, #1
 80013cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013d0:	f7ff faf4 	bl	80009bc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 80013d4:	2101      	movs	r1, #1
 80013d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013da:	f7ff faef 	bl	80009bc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE); // Enable clock for GPIO Port C
 80013de:	2101      	movs	r1, #1
 80013e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013e4:	f7ff faea 	bl	80009bc <RCC_AHBPeriphClockCmd>

	// PC0 Input
	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 80013e8:	463b      	mov	r3, r7
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ffd6 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT; // Set as input
 80013f0:	2301      	movs	r3, #1
 80013f2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP; // Set as Push-Pull
 80013f4:	2300      	movs	r3, #0
 80013f6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz; // Set speed to 2 MHz
 80013f8:	2302      	movs	r3, #2
 80013fa:	717b      	strb	r3, [r7, #5]

	// PB4 Output
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4; // Set so the configuration is on pin B4
 80013fc:	2310      	movs	r3, #16
 80013fe:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <initLed+0x70>)
 8001406:	f7fe ff33 	bl	8000270 <GPIO_Init>

	// PC7 Output
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7; // Set so the configuration is on pin C7
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <initLed+0x74>)
 8001414:	f7fe ff2c 	bl	8000270 <GPIO_Init>

	// PA9 Input
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9; // Set so the configuration is on pin A9
 8001418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141c:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f7fe ff23 	bl	8000270 <GPIO_Init>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	48000400 	.word	0x48000400
 8001438:	48000800 	.word	0x48000800

0800143c <setLed>:

void setLed(uint8_t colour)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, ((colour >> 2U) & 1U));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	2110      	movs	r1, #16
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <setLed+0x54>)
 8001458:	f7fe ffd6 	bl	8000408 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOC, GPIO_Pin_7, ((colour >> 1U) & 1U));
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <setLed+0x58>)
 800146e:	f7fe ffcb 	bl	8000408 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, ((colour >> 0U) & 1U));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f7fe ffc0 	bl	8000408 <GPIO_WriteBit>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800

08001498 <initJoystick>:

void initJoystick(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE); // Enable clock for GPIO Port A
 800149e:	2101      	movs	r1, #1
 80014a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014a4:	f7ff fa8a 	bl	80009bc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE); // Enable clock for GPIO Port B
 80014a8:	2101      	movs	r1, #1
 80014aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014ae:	f7ff fa85 	bl	80009bc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE); // Enable clock for GPIO Port C
 80014b2:	2101      	movs	r1, #1
 80014b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014b8:	f7ff fa80 	bl	80009bc <RCC_AHBPeriphClockCmd>

	// PC0 Input
	GPIO_InitTypeDef GPIO_InitStructAll; // Define typedef struct for setting pins
	GPIO_StructInit(&GPIO_InitStructAll); // Initialize GPIO struct
 80014bc:	463b      	mov	r3, r7
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ff6c 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN; // Set as input
 80014c4:	2300      	movs	r3, #0
 80014c6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN; // Set as pull down
 80014c8:	2302      	movs	r3, #2
 80014ca:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin C0
 80014cc:	2301      	movs	r3, #1
 80014ce:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <initJoystick+0x84>)
 80014d6:	f7fe fecb 	bl	8000270 <GPIO_Init>

	// PA4 Input
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4; // Set so the configuration is on pin A4
 80014da:	2310      	movs	r3, #16
 80014dc:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f7fe fec3 	bl	8000270 <GPIO_Init>

	// PB5 Input
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5; // Set so the configuration is on pin B5
 80014ea:	2320      	movs	r3, #32
 80014ec:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <initJoystick+0x88>)
 80014f4:	f7fe febc 	bl	8000270 <GPIO_Init>

	// PC1 Input
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_1; // Set so the configuration is on pin A4
 80014f8:	2302      	movs	r3, #2
 80014fa:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <initJoystick+0x84>)
 8001502:	f7fe feb5 	bl	8000270 <GPIO_Init>

	// PB0 Input
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0; // Set so the configuration is on pin A4
 8001506:	2301      	movs	r3, #1
 8001508:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll); // Setup of GPIO with the settings chosen
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <initJoystick+0x88>)
 8001510:	f7fe feae 	bl	8000270 <GPIO_Init>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	48000800 	.word	0x48000800
 8001520:	48000400 	.word	0x48000400

08001524 <readJoystick>:

uint8_t readJoystick(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	uint8_t up     = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_4);
 800152a:	2110      	movs	r1, #16
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f7fe ff4e 	bl	80003d0 <GPIO_ReadInputDataBit>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
	uint8_t down   = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0);
 8001538:	2101      	movs	r1, #1
 800153a:	4821      	ldr	r0, [pc, #132]	; (80015c0 <readJoystick+0x9c>)
 800153c:	f7fe ff48 	bl	80003d0 <GPIO_ReadInputDataBit>
 8001540:	4603      	mov	r3, r0
 8001542:	71bb      	strb	r3, [r7, #6]
	uint8_t left   = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_1);
 8001544:	2102      	movs	r1, #2
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <readJoystick+0xa0>)
 8001548:	f7fe ff42 	bl	80003d0 <GPIO_ReadInputDataBit>
 800154c:	4603      	mov	r3, r0
 800154e:	717b      	strb	r3, [r7, #5]
	uint8_t right  = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_0);
 8001550:	2101      	movs	r1, #1
 8001552:	481c      	ldr	r0, [pc, #112]	; (80015c4 <readJoystick+0xa0>)
 8001554:	f7fe ff3c 	bl	80003d0 <GPIO_ReadInputDataBit>
 8001558:	4603      	mov	r3, r0
 800155a:	713b      	strb	r3, [r7, #4]
	uint8_t centre = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5);
 800155c:	2120      	movs	r1, #32
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <readJoystick+0x9c>)
 8001560:	f7fe ff36 	bl	80003d0 <GPIO_ReadInputDataBit>
 8001564:	4603      	mov	r3, r0
 8001566:	70fb      	strb	r3, [r7, #3]

	uint8_t joystickBits = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	70bb      	strb	r3, [r7, #2]

	joystickBits |= up     << 0U;
 800156c:	78ba      	ldrb	r2, [r7, #2]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4313      	orrs	r3, r2
 8001572:	70bb      	strb	r3, [r7, #2]
	joystickBits |= down   << 1U;
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	b25a      	sxtb	r2, r3
 800157a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800157e:	4313      	orrs	r3, r2
 8001580:	b25b      	sxtb	r3, r3
 8001582:	70bb      	strb	r3, [r7, #2]
	joystickBits |= left   << 2U;
 8001584:	797b      	ldrb	r3, [r7, #5]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	b25a      	sxtb	r2, r3
 800158a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800158e:	4313      	orrs	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	70bb      	strb	r3, [r7, #2]
	joystickBits |= right  << 3U;
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	b25a      	sxtb	r2, r3
 800159a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800159e:	4313      	orrs	r3, r2
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	70bb      	strb	r3, [r7, #2]
	joystickBits |= centre << 4U;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	70bb      	strb	r3, [r7, #2]

	return joystickBits;
 80015b4:	78bb      	ldrb	r3, [r7, #2]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800

080015c8 <initTIM2>:

/* FUNCTION DEFINITIONS */
void initTIM2(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
	// Timer
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff fa13 	bl	80009fc <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TIM_InitStructure;
	TIM_TimeBaseStructInit(&TIM_InitStructure);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff faa6 	bl	8000b2c <TIM_TimeBaseStructInit>
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80015e4:	2300      	movs	r3, #0
 80015e6:	82fb      	strh	r3, [r7, #22]
	TIM_InitStructure.TIM_Prescaler = 63; // Scale counter freq to 1 MHz
 80015e8:	233f      	movs	r3, #63	; 0x3f
 80015ea:	82bb      	strh	r3, [r7, #20]
	TIM_InitStructure.TIM_Period = 0xFFFFFFFF; // Set auto-reload to maximum value
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	61bb      	str	r3, [r7, #24]
	TIM_TimeBaseInit(TIM2,&TIM_InitStructure);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015fc:	f7ff fa1e 	bl	8000a3c <TIM_TimeBaseInit>

	TIM_ICInitTypeDef TIM_ICInitStruct;
	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 8001600:	2300      	movs	r3, #0
 8001602:	813b      	strh	r3, [r7, #8]
	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001604:	2300      	movs	r3, #0
 8001606:	817b      	strh	r3, [r7, #10]
	TIM_PWMIConfig(TIM2, &TIM_ICInitStruct);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001612:	f7ff fac5 	bl	8000ba0 <TIM_PWMIConfig>

	TIM_ITConfig(TIM2, TIM_IT_CC1,ENABLE);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800161e:	f7ff fb64 	bl	8000cea <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);
 8001622:	2101      	movs	r1, #1
 8001624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001628:	f7ff fa9a 	bl	8000b60 <TIM_Cmd>

	// NVIC for timer
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800162c:	231c      	movs	r3, #28
 800162e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001630:	2301      	movs	r3, #1
 8001632:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructure);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff44 	bl	80004cc <NVIC_Init>
	NVIC_SetPriority(TIM2_IRQn, 0); // Set interrupt priority interrupts
 8001644:	2100      	movs	r1, #0
 8001646:	201c      	movs	r0, #28
 8001648:	f7ff fe92 	bl	8001370 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable interrupt
 800164c:	201c      	movs	r0, #28
 800164e:	f7ff fe75 	bl	800133c <NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <GPIO_set_AF_PA0>:

void GPIO_set_AF_PA0(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructAll;
	GPIO_StructInit(&GPIO_InitStructAll);
 8001660:	463b      	mov	r3, r7
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fe9a 	bl	800039c <GPIO_StructInit>

	// Configure Pin PA0 to Alternate Function Mode
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_AF;
 8001668:	2302      	movs	r3, #2
 800166a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0;
 800166c:	2301      	movs	r3, #1
 800166e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001670:	2302      	movs	r3, #2
 8001672:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_50MHz;
 8001674:	2303      	movs	r3, #3
 8001676:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f7fe fdf6 	bl	8000270 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_1); //Sets pin 0 at port A to alternative function 1
 8001684:	2201      	movs	r2, #1
 8001686:	2100      	movs	r1, #0
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f7fe fed4 	bl	8000438 <GPIO_PinAFConfig>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	// Clear Capture/Compare Interrupt Bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 800169c:	2102      	movs	r1, #2
 800169e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016a2:	f7ff fb42 	bl	8000d2a <TIM_ClearITPendingBit>
	setLed(CYAN);
 80016a6:	2004      	movs	r0, #4
 80016a8:	f7ff fec8 	bl	800143c <setLed>

	ICValue1 = TIM_GetCapture1(TIM2); // Period - Counts between rising edges
 80016ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016b0:	f7ff fad2 	bl	8000c58 <TIM_GetCapture1>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <TIM2_IRQHandler+0x3c>)
 80016b8:	6013      	str	r3, [r2, #0]
	ICValue2 = TIM_GetCapture2(TIM2); // Duty/Width - Counts with input channel HI between rising edges
 80016ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016be:	f7ff fad7 	bl	8000c70 <TIM_GetCapture2>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <TIM2_IRQHandler+0x40>)
 80016c6:	6013      	str	r3, [r2, #0]
	ICValid = 1;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <TIM2_IRQHandler+0x44>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001b0 	.word	0x200001b0
 80016d8:	200001b4 	.word	0x200001b4
 80016dc:	200001b8 	.word	0x200001b8

080016e0 <updateBufferAndGetOutput>:

uint64_t updateBufferAndGetOutput(SampleBuffer_S* buffer, uint32_t newSample)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	uint8_t bufferSize = buffer->size;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	72fb      	strb	r3, [r7, #11]

	if (bufferSize < NUM_SAMPLES)
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	2b09      	cmp	r3, #9
 80016f4:	d80c      	bhi.n	8001710 <updateBufferAndGetOutput+0x30>
	{
		buffer->sampleArray[bufferSize] = newSample;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	605a      	str	r2, [r3, #4]
		buffer->size++;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e016      	b.n	800173e <updateBufferAndGetOutput+0x5e>
	}
	else
	{
		for (int i = 0; i < NUM_SAMPLES - 1; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e00d      	b.n	8001732 <updateBufferAndGetOutput+0x52>
		{
			buffer->sampleArray[i] = buffer->sampleArray[i+1];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < NUM_SAMPLES - 1; i++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d9ee      	bls.n	8001716 <updateBufferAndGetOutput+0x36>
		}

		buffer->sampleArray[NUM_SAMPLES] = newSample;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	uint32_t sum = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < buffer->size; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e00a      	b.n	800175e <updateBufferAndGetOutput+0x7e>
	{
		sum += buffer->sampleArray[i];
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4413      	add	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < buffer->size; i++)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4293      	cmp	r3, r2
 8001768:	dbee      	blt.n	8001748 <updateBufferAndGetOutput+0x68>
	}

	return sum / buffer->size;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	fbb3 f3f2 	udiv	r3, r3, r2
 8001776:	461a      	mov	r2, r3
 8001778:	f04f 0300 	mov.w	r3, #0
}
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <main>:

int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09c      	sub	sp, #112	; 0x70
 8001790:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001792:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001796:	f7ff fcb7 	bl	8001108 <uart_init>
	GPIO_set_AF_PA0();
 800179a:	f7ff ff5e 	bl	800165a <GPIO_set_AF_PA0>
	initTIM2();
 800179e:	f7ff ff13 	bl	80015c8 <initTIM2>
	initJoystick();
 80017a2:	f7ff fe79 	bl	8001498 <initJoystick>
	initLed();
 80017a6:	f7ff fe0d 	bl	80013c4 <initLed>

	uint32_t inputFreq; // Input PWM frequency in Hz
	uint32_t dutyCycle; // Input PWM duty cycle in %

	uint8_t measurementEnabled = 1U;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	SampleBuffer_S freqBuffer = {0, {}};
 80017b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b4:	222c      	movs	r2, #44	; 0x2c
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fa01 	bl	8001bc0 <memset>
	SampleBuffer_S dutyCycleBuffer = {0, {}};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	222c      	movs	r2, #44	; 0x2c
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f9fb 	bl	8001bc0 <memset>
	uint32_t avgInputFreq;
	uint32_t avgDutyCycle;

	uint8_t lastJoystickState = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	while(1)
	{
		uint8_t joystickState = readJoystick();
 80017d0:	f7ff fea8 	bl	8001524 <readJoystick>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		if (joystickState != lastJoystickState)
 80017da:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80017de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d02e      	beq.n	8001844 <main+0xb8>
		{
			lastJoystickState = joystickState;
 80017e6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

			if (joystickState == CENTRE)
 80017ee:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d10b      	bne.n	800180e <main+0x82>
			{
				if (measurementEnabled == 1)
 80017f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d103      	bne.n	8001806 <main+0x7a>
				{
					measurementEnabled = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001804:	e01e      	b.n	8001844 <main+0xb8>
				}
				else
				{
					measurementEnabled = 1;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800180c:	e01a      	b.n	8001844 <main+0xb8>
				}
			}
			else if (joystickState == DOWN)
 800180e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001812:	2b02      	cmp	r3, #2
 8001814:	d116      	bne.n	8001844 <main+0xb8>
			{
				printf("Resetting Sample Buffers\n");
 8001816:	4830      	ldr	r0, [pc, #192]	; (80018d8 <main+0x14c>)
 8001818:	f000 fa60 	bl	8001cdc <puts>
				memset(freqBuffer.sampleArray, 0, sizeof(freqBuffer.sampleArray));
 800181c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001820:	3304      	adds	r3, #4
 8001822:	2228      	movs	r2, #40	; 0x28
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f9ca 	bl	8001bc0 <memset>
				freqBuffer.size = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				memset(dutyCycleBuffer.sampleArray, 0, sizeof(dutyCycleBuffer.sampleArray));
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	3304      	adds	r3, #4
 8001836:	2228      	movs	r2, #40	; 0x28
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f9c0 	bl	8001bc0 <memset>
				dutyCycleBuffer.size = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	713b      	strb	r3, [r7, #4]
			}
		}

		if (measurementEnabled == 1)
 8001844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001848:	2b01      	cmp	r3, #1
 800184a:	d141      	bne.n	80018d0 <main+0x144>
		{
			setLed(GREEN);
 800184c:	2005      	movs	r0, #5
 800184e:	f7ff fdf5 	bl	800143c <setLed>

			if (ICValid == 1)
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <main+0x150>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1b9      	bne.n	80017d0 <main+0x44>
			{
				if (ICValue1 > 0)
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <main+0x154>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d010      	beq.n	8001886 <main+0xfa>
				{
					inputFreq = TIM_FREQ / ICValue1;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <main+0x154>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <main+0x158>)
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	66fb      	str	r3, [r7, #108]	; 0x6c
					dutyCycle = (100 * ICValue2) / ICValue1;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <main+0x15c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <main+0x154>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	66bb      	str	r3, [r7, #104]	; 0x68
 8001884:	e003      	b.n	800188e <main+0x102>
				}
				else
				{
					inputFreq = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	66fb      	str	r3, [r7, #108]	; 0x6c
					dutyCycle = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	66bb      	str	r3, [r7, #104]	; 0x68
				}

				printf("Signal Frequency: %ld Hz\nDuty Cycle = %ld %%\n",
 800188e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001890:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <main+0x160>)
 8001894:	f000 f99c 	bl	8001bd0 <iprintf>
					   (unsigned long) inputFreq,
					   (unsigned long) dutyCycle);

				avgInputFreq = updateBufferAndGetOutput(&freqBuffer, inputFreq);
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff1e 	bl	80016e0 <updateBufferAndGetOutput>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
				avgDutyCycle = updateBufferAndGetOutput(&dutyCycleBuffer, dutyCycle);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff15 	bl	80016e0 <updateBufferAndGetOutput>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4613      	mov	r3, r2
 80018bc:	65fb      	str	r3, [r7, #92]	; 0x5c
				ICValid = 0;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <main+0x150>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]

				printf("Avg Signal Frequency: %ld Hz\nAvg Duty Cycle = %ld %%\n",
 80018c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <main+0x164>)
 80018ca:	f000 f981 	bl	8001bd0 <iprintf>
 80018ce:	e77f      	b.n	80017d0 <main+0x44>

			}
		}
		else
		{
			setLed(RED);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f7ff fdb3 	bl	800143c <setLed>
	{
 80018d6:	e77b      	b.n	80017d0 <main+0x44>
 80018d8:	08002d08 	.word	0x08002d08
 80018dc:	200001b8 	.word	0x200001b8
 80018e0:	200001b0 	.word	0x200001b0
 80018e4:	000f4240 	.word	0x000f4240
 80018e8:	200001b4 	.word	0x200001b4
 80018ec:	08002d24 	.word	0x08002d24
 80018f0:	08002d54 	.word	0x08002d54

080018f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
	}

return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:
	}
	return len;
}

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
	return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x50>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x16>
		heap_end = &end;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <_sbrk+0x50>)
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <_sbrk+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <_sbrk+0x50>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <_sbrk+0x50>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	466a      	mov	r2, sp
 80019be:	4293      	cmp	r3, r2
 80019c0:	d907      	bls.n	80019d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019c2:	f000 f8d3 	bl	8001b6c <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	220c      	movs	r2, #12
 80019ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	e006      	b.n	80019e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <_sbrk+0x50>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <_sbrk+0x50>)
 80019dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200001bc 	.word	0x200001bc
 80019ec:	200001d8 	.word	0x200001d8

080019f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SystemInit+0x84>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <SystemInit+0x84>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <SystemInit+0x88>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <SystemInit+0x88>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <SystemInit+0x88>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <SystemInit+0x88>)
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <SystemInit+0x8c>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <SystemInit+0x88>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <SystemInit+0x88>)
 8001a22:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SystemInit+0x88>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <SystemInit+0x88>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <SystemInit+0x88>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <SystemInit+0x88>)
 8001a3e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a42:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <SystemInit+0x88>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <SystemInit+0x88>)
 8001a4a:	f023 030f 	bic.w	r3, r3, #15
 8001a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <SystemInit+0x88>)
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	4908      	ldr	r1, [pc, #32]	; (8001a78 <SystemInit+0x88>)
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <SystemInit+0x90>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x88>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001a62:	f000 f80f 	bl	8001a84 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <SystemInit+0x84>)
 8001a68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6c:	609a      	str	r2, [r3, #8]
#endif  
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	f87fc00c 	.word	0xf87fc00c
 8001a80:	ff00fccc 	.word	0xff00fccc

08001a84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <SetSysClock+0x8c>)
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <SetSysClock+0x90>)
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <SetSysClock+0x90>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <SetSysClock+0x90>)
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <SetSysClock+0x90>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <SetSysClock+0x90>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <SetSysClock+0x90>)
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <SetSysClock+0x90>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <SetSysClock+0x90>)
 8001ab0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001ab4:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <SetSysClock+0x90>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <SetSysClock+0x90>)
 8001abc:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001ac0:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <SetSysClock+0x90>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <SetSysClock+0x90>)
 8001ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ace:	bf00      	nop
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <SetSysClock+0x90>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f9      	beq.n	8001ad0 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <SetSysClock+0x90>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <SetSysClock+0x90>)
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <SetSysClock+0x90>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <SetSysClock+0x90>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001af4:	bf00      	nop
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <SetSysClock+0x90>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d1f9      	bne.n	8001af6 <SetSysClock+0x72>
  {
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40021000 	.word	0x40021000

08001b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopForever+0xe>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopForever+0x16>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b42:	f7ff ff55 	bl	80019f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b46:	f000 f817 	bl	8001b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fe1f 	bl	800178c <main>

08001b4e <LoopForever>:

LoopForever:
    b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   r0, =_estack
 8001b50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b5c:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8001b60:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b64:	200001d8 	.word	0x200001d8

08001b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_2_IRQHandler>
	...

08001b6c <__errno>:
 8001b6c:	4b01      	ldr	r3, [pc, #4]	; (8001b74 <__errno+0x8>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000002c 	.word	0x2000002c

08001b78 <__libc_init_array>:
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	4d0d      	ldr	r5, [pc, #52]	; (8001bb0 <__libc_init_array+0x38>)
 8001b7c:	4c0d      	ldr	r4, [pc, #52]	; (8001bb4 <__libc_init_array+0x3c>)
 8001b7e:	1b64      	subs	r4, r4, r5
 8001b80:	10a4      	asrs	r4, r4, #2
 8001b82:	2600      	movs	r6, #0
 8001b84:	42a6      	cmp	r6, r4
 8001b86:	d109      	bne.n	8001b9c <__libc_init_array+0x24>
 8001b88:	4d0b      	ldr	r5, [pc, #44]	; (8001bb8 <__libc_init_array+0x40>)
 8001b8a:	4c0c      	ldr	r4, [pc, #48]	; (8001bbc <__libc_init_array+0x44>)
 8001b8c:	f001 f8b0 	bl	8002cf0 <_init>
 8001b90:	1b64      	subs	r4, r4, r5
 8001b92:	10a4      	asrs	r4, r4, #2
 8001b94:	2600      	movs	r6, #0
 8001b96:	42a6      	cmp	r6, r4
 8001b98:	d105      	bne.n	8001ba6 <__libc_init_array+0x2e>
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
 8001b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba0:	4798      	blx	r3
 8001ba2:	3601      	adds	r6, #1
 8001ba4:	e7ee      	b.n	8001b84 <__libc_init_array+0xc>
 8001ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001baa:	4798      	blx	r3
 8001bac:	3601      	adds	r6, #1
 8001bae:	e7f2      	b.n	8001b96 <__libc_init_array+0x1e>
 8001bb0:	08002e24 	.word	0x08002e24
 8001bb4:	08002e24 	.word	0x08002e24
 8001bb8:	08002e24 	.word	0x08002e24
 8001bbc:	08002e28 	.word	0x08002e28

08001bc0 <memset>:
 8001bc0:	4402      	add	r2, r0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d100      	bne.n	8001bca <memset+0xa>
 8001bc8:	4770      	bx	lr
 8001bca:	f803 1b01 	strb.w	r1, [r3], #1
 8001bce:	e7f9      	b.n	8001bc4 <memset+0x4>

08001bd0 <iprintf>:
 8001bd0:	b40f      	push	{r0, r1, r2, r3}
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <iprintf+0x2c>)
 8001bd4:	b513      	push	{r0, r1, r4, lr}
 8001bd6:	681c      	ldr	r4, [r3, #0]
 8001bd8:	b124      	cbz	r4, 8001be4 <iprintf+0x14>
 8001bda:	69a3      	ldr	r3, [r4, #24]
 8001bdc:	b913      	cbnz	r3, 8001be4 <iprintf+0x14>
 8001bde:	4620      	mov	r0, r4
 8001be0:	f000 fb2c 	bl	800223c <__sinit>
 8001be4:	ab05      	add	r3, sp, #20
 8001be6:	9a04      	ldr	r2, [sp, #16]
 8001be8:	68a1      	ldr	r1, [r4, #8]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 fd05 	bl	80025fc <_vfiprintf_r>
 8001bf2:	b002      	add	sp, #8
 8001bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf8:	b004      	add	sp, #16
 8001bfa:	4770      	bx	lr
 8001bfc:	2000002c 	.word	0x2000002c

08001c00 <_puts_r>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	460e      	mov	r6, r1
 8001c04:	4605      	mov	r5, r0
 8001c06:	b118      	cbz	r0, 8001c10 <_puts_r+0x10>
 8001c08:	6983      	ldr	r3, [r0, #24]
 8001c0a:	b90b      	cbnz	r3, 8001c10 <_puts_r+0x10>
 8001c0c:	f000 fb16 	bl	800223c <__sinit>
 8001c10:	69ab      	ldr	r3, [r5, #24]
 8001c12:	68ac      	ldr	r4, [r5, #8]
 8001c14:	b913      	cbnz	r3, 8001c1c <_puts_r+0x1c>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f000 fb10 	bl	800223c <__sinit>
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <_puts_r+0xd0>)
 8001c1e:	429c      	cmp	r4, r3
 8001c20:	d120      	bne.n	8001c64 <_puts_r+0x64>
 8001c22:	686c      	ldr	r4, [r5, #4]
 8001c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c26:	07db      	lsls	r3, r3, #31
 8001c28:	d405      	bmi.n	8001c36 <_puts_r+0x36>
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	0598      	lsls	r0, r3, #22
 8001c2e:	d402      	bmi.n	8001c36 <_puts_r+0x36>
 8001c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c32:	f000 fba1 	bl	8002378 <__retarget_lock_acquire_recursive>
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	0719      	lsls	r1, r3, #28
 8001c3a:	d51d      	bpl.n	8001c78 <_puts_r+0x78>
 8001c3c:	6923      	ldr	r3, [r4, #16]
 8001c3e:	b1db      	cbz	r3, 8001c78 <_puts_r+0x78>
 8001c40:	3e01      	subs	r6, #1
 8001c42:	68a3      	ldr	r3, [r4, #8]
 8001c44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60a3      	str	r3, [r4, #8]
 8001c4c:	bb39      	cbnz	r1, 8001c9e <_puts_r+0x9e>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da38      	bge.n	8001cc4 <_puts_r+0xc4>
 8001c52:	4622      	mov	r2, r4
 8001c54:	210a      	movs	r1, #10
 8001c56:	4628      	mov	r0, r5
 8001c58:	f000 f916 	bl	8001e88 <__swbuf_r>
 8001c5c:	3001      	adds	r0, #1
 8001c5e:	d011      	beq.n	8001c84 <_puts_r+0x84>
 8001c60:	250a      	movs	r5, #10
 8001c62:	e011      	b.n	8001c88 <_puts_r+0x88>
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <_puts_r+0xd4>)
 8001c66:	429c      	cmp	r4, r3
 8001c68:	d101      	bne.n	8001c6e <_puts_r+0x6e>
 8001c6a:	68ac      	ldr	r4, [r5, #8]
 8001c6c:	e7da      	b.n	8001c24 <_puts_r+0x24>
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <_puts_r+0xd8>)
 8001c70:	429c      	cmp	r4, r3
 8001c72:	bf08      	it	eq
 8001c74:	68ec      	ldreq	r4, [r5, #12]
 8001c76:	e7d5      	b.n	8001c24 <_puts_r+0x24>
 8001c78:	4621      	mov	r1, r4
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 f956 	bl	8001f2c <__swsetup_r>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d0dd      	beq.n	8001c40 <_puts_r+0x40>
 8001c84:	f04f 35ff 	mov.w	r5, #4294967295
 8001c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c8a:	07da      	lsls	r2, r3, #31
 8001c8c:	d405      	bmi.n	8001c9a <_puts_r+0x9a>
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	059b      	lsls	r3, r3, #22
 8001c92:	d402      	bmi.n	8001c9a <_puts_r+0x9a>
 8001c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c96:	f000 fb70 	bl	800237a <__retarget_lock_release_recursive>
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da04      	bge.n	8001cac <_puts_r+0xac>
 8001ca2:	69a2      	ldr	r2, [r4, #24]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dc06      	bgt.n	8001cb6 <_puts_r+0xb6>
 8001ca8:	290a      	cmp	r1, #10
 8001caa:	d004      	beq.n	8001cb6 <_puts_r+0xb6>
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	6022      	str	r2, [r4, #0]
 8001cb2:	7019      	strb	r1, [r3, #0]
 8001cb4:	e7c5      	b.n	8001c42 <_puts_r+0x42>
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f000 f8e5 	bl	8001e88 <__swbuf_r>
 8001cbe:	3001      	adds	r0, #1
 8001cc0:	d1bf      	bne.n	8001c42 <_puts_r+0x42>
 8001cc2:	e7df      	b.n	8001c84 <_puts_r+0x84>
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	250a      	movs	r5, #10
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	6022      	str	r2, [r4, #0]
 8001ccc:	701d      	strb	r5, [r3, #0]
 8001cce:	e7db      	b.n	8001c88 <_puts_r+0x88>
 8001cd0:	08002db0 	.word	0x08002db0
 8001cd4:	08002dd0 	.word	0x08002dd0
 8001cd8:	08002d90 	.word	0x08002d90

08001cdc <puts>:
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <puts+0xc>)
 8001cde:	4601      	mov	r1, r0
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f7ff bf8d 	b.w	8001c00 <_puts_r>
 8001ce6:	bf00      	nop
 8001ce8:	2000002c 	.word	0x2000002c

08001cec <setbuf>:
 8001cec:	2900      	cmp	r1, #0
 8001cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2202      	moveq	r2, #2
 8001cf6:	2200      	movne	r2, #0
 8001cf8:	f000 b800 	b.w	8001cfc <setvbuf>

08001cfc <setvbuf>:
 8001cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001d00:	461d      	mov	r5, r3
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <setvbuf+0x17c>)
 8001d04:	681f      	ldr	r7, [r3, #0]
 8001d06:	4604      	mov	r4, r0
 8001d08:	460e      	mov	r6, r1
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	b127      	cbz	r7, 8001d18 <setvbuf+0x1c>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	b913      	cbnz	r3, 8001d18 <setvbuf+0x1c>
 8001d12:	4638      	mov	r0, r7
 8001d14:	f000 fa92 	bl	800223c <__sinit>
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <setvbuf+0x180>)
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d167      	bne.n	8001dee <setvbuf+0xf2>
 8001d1e:	687c      	ldr	r4, [r7, #4]
 8001d20:	f1b8 0f02 	cmp.w	r8, #2
 8001d24:	d006      	beq.n	8001d34 <setvbuf+0x38>
 8001d26:	f1b8 0f01 	cmp.w	r8, #1
 8001d2a:	f200 809f 	bhi.w	8001e6c <setvbuf+0x170>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f2c0 809c 	blt.w	8001e6c <setvbuf+0x170>
 8001d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d36:	07db      	lsls	r3, r3, #31
 8001d38:	d405      	bmi.n	8001d46 <setvbuf+0x4a>
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	0598      	lsls	r0, r3, #22
 8001d3e:	d402      	bmi.n	8001d46 <setvbuf+0x4a>
 8001d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d42:	f000 fb19 	bl	8002378 <__retarget_lock_acquire_recursive>
 8001d46:	4621      	mov	r1, r4
 8001d48:	4638      	mov	r0, r7
 8001d4a:	f000 f9e3 	bl	8002114 <_fflush_r>
 8001d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d50:	b141      	cbz	r1, 8001d64 <setvbuf+0x68>
 8001d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d56:	4299      	cmp	r1, r3
 8001d58:	d002      	beq.n	8001d60 <setvbuf+0x64>
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	f000 fb7a 	bl	8002454 <_free_r>
 8001d60:	2300      	movs	r3, #0
 8001d62:	6363      	str	r3, [r4, #52]	; 0x34
 8001d64:	2300      	movs	r3, #0
 8001d66:	61a3      	str	r3, [r4, #24]
 8001d68:	6063      	str	r3, [r4, #4]
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	0619      	lsls	r1, r3, #24
 8001d6e:	d503      	bpl.n	8001d78 <setvbuf+0x7c>
 8001d70:	6921      	ldr	r1, [r4, #16]
 8001d72:	4638      	mov	r0, r7
 8001d74:	f000 fb6e 	bl	8002454 <_free_r>
 8001d78:	89a3      	ldrh	r3, [r4, #12]
 8001d7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	f1b8 0f02 	cmp.w	r8, #2
 8001d86:	81a3      	strh	r3, [r4, #12]
 8001d88:	d06c      	beq.n	8001e64 <setvbuf+0x168>
 8001d8a:	ab01      	add	r3, sp, #4
 8001d8c:	466a      	mov	r2, sp
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4638      	mov	r0, r7
 8001d92:	f000 faf3 	bl	800237c <__swhatbuf_r>
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	4318      	orrs	r0, r3
 8001d9a:	81a0      	strh	r0, [r4, #12]
 8001d9c:	2d00      	cmp	r5, #0
 8001d9e:	d130      	bne.n	8001e02 <setvbuf+0x106>
 8001da0:	9d00      	ldr	r5, [sp, #0]
 8001da2:	4628      	mov	r0, r5
 8001da4:	f000 fb4e 	bl	8002444 <malloc>
 8001da8:	4606      	mov	r6, r0
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d155      	bne.n	8001e5a <setvbuf+0x15e>
 8001dae:	f8dd 9000 	ldr.w	r9, [sp]
 8001db2:	45a9      	cmp	r9, r5
 8001db4:	d14a      	bne.n	8001e4c <setvbuf+0x150>
 8001db6:	f04f 35ff 	mov.w	r5, #4294967295
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60a2      	str	r2, [r4, #8]
 8001dbe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001dc2:	6022      	str	r2, [r4, #0]
 8001dc4:	6122      	str	r2, [r4, #16]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dcc:	6162      	str	r2, [r4, #20]
 8001dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	07d2      	lsls	r2, r2, #31
 8001dd6:	81a3      	strh	r3, [r4, #12]
 8001dd8:	d405      	bmi.n	8001de6 <setvbuf+0xea>
 8001dda:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001dde:	d102      	bne.n	8001de6 <setvbuf+0xea>
 8001de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001de2:	f000 faca 	bl	800237a <__retarget_lock_release_recursive>
 8001de6:	4628      	mov	r0, r5
 8001de8:	b003      	add	sp, #12
 8001dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <setvbuf+0x184>)
 8001df0:	429c      	cmp	r4, r3
 8001df2:	d101      	bne.n	8001df8 <setvbuf+0xfc>
 8001df4:	68bc      	ldr	r4, [r7, #8]
 8001df6:	e793      	b.n	8001d20 <setvbuf+0x24>
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <setvbuf+0x188>)
 8001dfa:	429c      	cmp	r4, r3
 8001dfc:	bf08      	it	eq
 8001dfe:	68fc      	ldreq	r4, [r7, #12]
 8001e00:	e78e      	b.n	8001d20 <setvbuf+0x24>
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d0cd      	beq.n	8001da2 <setvbuf+0xa6>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	b913      	cbnz	r3, 8001e10 <setvbuf+0x114>
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	f000 fa16 	bl	800223c <__sinit>
 8001e10:	f1b8 0f01 	cmp.w	r8, #1
 8001e14:	bf08      	it	eq
 8001e16:	89a3      	ldrheq	r3, [r4, #12]
 8001e18:	6026      	str	r6, [r4, #0]
 8001e1a:	bf04      	itt	eq
 8001e1c:	f043 0301 	orreq.w	r3, r3, #1
 8001e20:	81a3      	strheq	r3, [r4, #12]
 8001e22:	89a2      	ldrh	r2, [r4, #12]
 8001e24:	f012 0308 	ands.w	r3, r2, #8
 8001e28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001e2c:	d01c      	beq.n	8001e68 <setvbuf+0x16c>
 8001e2e:	07d3      	lsls	r3, r2, #31
 8001e30:	bf41      	itttt	mi
 8001e32:	2300      	movmi	r3, #0
 8001e34:	426d      	negmi	r5, r5
 8001e36:	60a3      	strmi	r3, [r4, #8]
 8001e38:	61a5      	strmi	r5, [r4, #24]
 8001e3a:	bf58      	it	pl
 8001e3c:	60a5      	strpl	r5, [r4, #8]
 8001e3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001e40:	f015 0501 	ands.w	r5, r5, #1
 8001e44:	d115      	bne.n	8001e72 <setvbuf+0x176>
 8001e46:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001e4a:	e7c8      	b.n	8001dde <setvbuf+0xe2>
 8001e4c:	4648      	mov	r0, r9
 8001e4e:	f000 faf9 	bl	8002444 <malloc>
 8001e52:	4606      	mov	r6, r0
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d0ae      	beq.n	8001db6 <setvbuf+0xba>
 8001e58:	464d      	mov	r5, r9
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	81a3      	strh	r3, [r4, #12]
 8001e62:	e7d0      	b.n	8001e06 <setvbuf+0x10a>
 8001e64:	2500      	movs	r5, #0
 8001e66:	e7a8      	b.n	8001dba <setvbuf+0xbe>
 8001e68:	60a3      	str	r3, [r4, #8]
 8001e6a:	e7e8      	b.n	8001e3e <setvbuf+0x142>
 8001e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8001e70:	e7b9      	b.n	8001de6 <setvbuf+0xea>
 8001e72:	2500      	movs	r5, #0
 8001e74:	e7b7      	b.n	8001de6 <setvbuf+0xea>
 8001e76:	bf00      	nop
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	08002db0 	.word	0x08002db0
 8001e80:	08002dd0 	.word	0x08002dd0
 8001e84:	08002d90 	.word	0x08002d90

08001e88 <__swbuf_r>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	460e      	mov	r6, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	4605      	mov	r5, r0
 8001e90:	b118      	cbz	r0, 8001e9a <__swbuf_r+0x12>
 8001e92:	6983      	ldr	r3, [r0, #24]
 8001e94:	b90b      	cbnz	r3, 8001e9a <__swbuf_r+0x12>
 8001e96:	f000 f9d1 	bl	800223c <__sinit>
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <__swbuf_r+0x98>)
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	d12b      	bne.n	8001ef8 <__swbuf_r+0x70>
 8001ea0:	686c      	ldr	r4, [r5, #4]
 8001ea2:	69a3      	ldr	r3, [r4, #24]
 8001ea4:	60a3      	str	r3, [r4, #8]
 8001ea6:	89a3      	ldrh	r3, [r4, #12]
 8001ea8:	071a      	lsls	r2, r3, #28
 8001eaa:	d52f      	bpl.n	8001f0c <__swbuf_r+0x84>
 8001eac:	6923      	ldr	r3, [r4, #16]
 8001eae:	b36b      	cbz	r3, 8001f0c <__swbuf_r+0x84>
 8001eb0:	6923      	ldr	r3, [r4, #16]
 8001eb2:	6820      	ldr	r0, [r4, #0]
 8001eb4:	1ac0      	subs	r0, r0, r3
 8001eb6:	6963      	ldr	r3, [r4, #20]
 8001eb8:	b2f6      	uxtb	r6, r6
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	4637      	mov	r7, r6
 8001ebe:	dc04      	bgt.n	8001eca <__swbuf_r+0x42>
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f000 f926 	bl	8002114 <_fflush_r>
 8001ec8:	bb30      	cbnz	r0, 8001f18 <__swbuf_r+0x90>
 8001eca:	68a3      	ldr	r3, [r4, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60a3      	str	r3, [r4, #8]
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	6022      	str	r2, [r4, #0]
 8001ed6:	701e      	strb	r6, [r3, #0]
 8001ed8:	6963      	ldr	r3, [r4, #20]
 8001eda:	3001      	adds	r0, #1
 8001edc:	4283      	cmp	r3, r0
 8001ede:	d004      	beq.n	8001eea <__swbuf_r+0x62>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	07db      	lsls	r3, r3, #31
 8001ee4:	d506      	bpl.n	8001ef4 <__swbuf_r+0x6c>
 8001ee6:	2e0a      	cmp	r6, #10
 8001ee8:	d104      	bne.n	8001ef4 <__swbuf_r+0x6c>
 8001eea:	4621      	mov	r1, r4
 8001eec:	4628      	mov	r0, r5
 8001eee:	f000 f911 	bl	8002114 <_fflush_r>
 8001ef2:	b988      	cbnz	r0, 8001f18 <__swbuf_r+0x90>
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <__swbuf_r+0x9c>)
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d101      	bne.n	8001f02 <__swbuf_r+0x7a>
 8001efe:	68ac      	ldr	r4, [r5, #8]
 8001f00:	e7cf      	b.n	8001ea2 <__swbuf_r+0x1a>
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <__swbuf_r+0xa0>)
 8001f04:	429c      	cmp	r4, r3
 8001f06:	bf08      	it	eq
 8001f08:	68ec      	ldreq	r4, [r5, #12]
 8001f0a:	e7ca      	b.n	8001ea2 <__swbuf_r+0x1a>
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f000 f80c 	bl	8001f2c <__swsetup_r>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d0cb      	beq.n	8001eb0 <__swbuf_r+0x28>
 8001f18:	f04f 37ff 	mov.w	r7, #4294967295
 8001f1c:	e7ea      	b.n	8001ef4 <__swbuf_r+0x6c>
 8001f1e:	bf00      	nop
 8001f20:	08002db0 	.word	0x08002db0
 8001f24:	08002dd0 	.word	0x08002dd0
 8001f28:	08002d90 	.word	0x08002d90

08001f2c <__swsetup_r>:
 8001f2c:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <__swsetup_r+0xcc>)
 8001f2e:	b570      	push	{r4, r5, r6, lr}
 8001f30:	681d      	ldr	r5, [r3, #0]
 8001f32:	4606      	mov	r6, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	b125      	cbz	r5, 8001f42 <__swsetup_r+0x16>
 8001f38:	69ab      	ldr	r3, [r5, #24]
 8001f3a:	b913      	cbnz	r3, 8001f42 <__swsetup_r+0x16>
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f000 f97d 	bl	800223c <__sinit>
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <__swsetup_r+0xd0>)
 8001f44:	429c      	cmp	r4, r3
 8001f46:	d10f      	bne.n	8001f68 <__swsetup_r+0x3c>
 8001f48:	686c      	ldr	r4, [r5, #4]
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f50:	0719      	lsls	r1, r3, #28
 8001f52:	d42c      	bmi.n	8001fae <__swsetup_r+0x82>
 8001f54:	06dd      	lsls	r5, r3, #27
 8001f56:	d411      	bmi.n	8001f7c <__swsetup_r+0x50>
 8001f58:	2309      	movs	r3, #9
 8001f5a:	6033      	str	r3, [r6, #0]
 8001f5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f60:	81a3      	strh	r3, [r4, #12]
 8001f62:	f04f 30ff 	mov.w	r0, #4294967295
 8001f66:	e03e      	b.n	8001fe6 <__swsetup_r+0xba>
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <__swsetup_r+0xd4>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d101      	bne.n	8001f72 <__swsetup_r+0x46>
 8001f6e:	68ac      	ldr	r4, [r5, #8]
 8001f70:	e7eb      	b.n	8001f4a <__swsetup_r+0x1e>
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <__swsetup_r+0xd8>)
 8001f74:	429c      	cmp	r4, r3
 8001f76:	bf08      	it	eq
 8001f78:	68ec      	ldreq	r4, [r5, #12]
 8001f7a:	e7e6      	b.n	8001f4a <__swsetup_r+0x1e>
 8001f7c:	0758      	lsls	r0, r3, #29
 8001f7e:	d512      	bpl.n	8001fa6 <__swsetup_r+0x7a>
 8001f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f82:	b141      	cbz	r1, 8001f96 <__swsetup_r+0x6a>
 8001f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	d002      	beq.n	8001f92 <__swsetup_r+0x66>
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f000 fa61 	bl	8002454 <_free_r>
 8001f92:	2300      	movs	r3, #0
 8001f94:	6363      	str	r3, [r4, #52]	; 0x34
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	6063      	str	r3, [r4, #4]
 8001fa2:	6923      	ldr	r3, [r4, #16]
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	6923      	ldr	r3, [r4, #16]
 8001fb0:	b94b      	cbnz	r3, 8001fc6 <__swsetup_r+0x9a>
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbc:	d003      	beq.n	8001fc6 <__swsetup_r+0x9a>
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f000 f9ff 	bl	80023c4 <__smakebuf_r>
 8001fc6:	89a0      	ldrh	r0, [r4, #12]
 8001fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fcc:	f010 0301 	ands.w	r3, r0, #1
 8001fd0:	d00a      	beq.n	8001fe8 <__swsetup_r+0xbc>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60a3      	str	r3, [r4, #8]
 8001fd6:	6963      	ldr	r3, [r4, #20]
 8001fd8:	425b      	negs	r3, r3
 8001fda:	61a3      	str	r3, [r4, #24]
 8001fdc:	6923      	ldr	r3, [r4, #16]
 8001fde:	b943      	cbnz	r3, 8001ff2 <__swsetup_r+0xc6>
 8001fe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fe4:	d1ba      	bne.n	8001f5c <__swsetup_r+0x30>
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	0781      	lsls	r1, r0, #30
 8001fea:	bf58      	it	pl
 8001fec:	6963      	ldrpl	r3, [r4, #20]
 8001fee:	60a3      	str	r3, [r4, #8]
 8001ff0:	e7f4      	b.n	8001fdc <__swsetup_r+0xb0>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e7f7      	b.n	8001fe6 <__swsetup_r+0xba>
 8001ff6:	bf00      	nop
 8001ff8:	2000002c 	.word	0x2000002c
 8001ffc:	08002db0 	.word	0x08002db0
 8002000:	08002dd0 	.word	0x08002dd0
 8002004:	08002d90 	.word	0x08002d90

08002008 <__sflush_r>:
 8002008:	898a      	ldrh	r2, [r1, #12]
 800200a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800200e:	4605      	mov	r5, r0
 8002010:	0710      	lsls	r0, r2, #28
 8002012:	460c      	mov	r4, r1
 8002014:	d458      	bmi.n	80020c8 <__sflush_r+0xc0>
 8002016:	684b      	ldr	r3, [r1, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dc05      	bgt.n	8002028 <__sflush_r+0x20>
 800201c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	dc02      	bgt.n	8002028 <__sflush_r+0x20>
 8002022:	2000      	movs	r0, #0
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800202a:	2e00      	cmp	r6, #0
 800202c:	d0f9      	beq.n	8002022 <__sflush_r+0x1a>
 800202e:	2300      	movs	r3, #0
 8002030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002034:	682f      	ldr	r7, [r5, #0]
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	d032      	beq.n	80020a0 <__sflush_r+0x98>
 800203a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	075a      	lsls	r2, r3, #29
 8002040:	d505      	bpl.n	800204e <__sflush_r+0x46>
 8002042:	6863      	ldr	r3, [r4, #4]
 8002044:	1ac0      	subs	r0, r0, r3
 8002046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002048:	b10b      	cbz	r3, 800204e <__sflush_r+0x46>
 800204a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	2300      	movs	r3, #0
 8002050:	4602      	mov	r2, r0
 8002052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002054:	6a21      	ldr	r1, [r4, #32]
 8002056:	4628      	mov	r0, r5
 8002058:	47b0      	blx	r6
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	d106      	bne.n	800206e <__sflush_r+0x66>
 8002060:	6829      	ldr	r1, [r5, #0]
 8002062:	291d      	cmp	r1, #29
 8002064:	d82c      	bhi.n	80020c0 <__sflush_r+0xb8>
 8002066:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <__sflush_r+0x108>)
 8002068:	40ca      	lsrs	r2, r1
 800206a:	07d6      	lsls	r6, r2, #31
 800206c:	d528      	bpl.n	80020c0 <__sflush_r+0xb8>
 800206e:	2200      	movs	r2, #0
 8002070:	6062      	str	r2, [r4, #4]
 8002072:	04d9      	lsls	r1, r3, #19
 8002074:	6922      	ldr	r2, [r4, #16]
 8002076:	6022      	str	r2, [r4, #0]
 8002078:	d504      	bpl.n	8002084 <__sflush_r+0x7c>
 800207a:	1c42      	adds	r2, r0, #1
 800207c:	d101      	bne.n	8002082 <__sflush_r+0x7a>
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	b903      	cbnz	r3, 8002084 <__sflush_r+0x7c>
 8002082:	6560      	str	r0, [r4, #84]	; 0x54
 8002084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002086:	602f      	str	r7, [r5, #0]
 8002088:	2900      	cmp	r1, #0
 800208a:	d0ca      	beq.n	8002022 <__sflush_r+0x1a>
 800208c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002090:	4299      	cmp	r1, r3
 8002092:	d002      	beq.n	800209a <__sflush_r+0x92>
 8002094:	4628      	mov	r0, r5
 8002096:	f000 f9dd 	bl	8002454 <_free_r>
 800209a:	2000      	movs	r0, #0
 800209c:	6360      	str	r0, [r4, #52]	; 0x34
 800209e:	e7c1      	b.n	8002024 <__sflush_r+0x1c>
 80020a0:	6a21      	ldr	r1, [r4, #32]
 80020a2:	2301      	movs	r3, #1
 80020a4:	4628      	mov	r0, r5
 80020a6:	47b0      	blx	r6
 80020a8:	1c41      	adds	r1, r0, #1
 80020aa:	d1c7      	bne.n	800203c <__sflush_r+0x34>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0c4      	beq.n	800203c <__sflush_r+0x34>
 80020b2:	2b1d      	cmp	r3, #29
 80020b4:	d001      	beq.n	80020ba <__sflush_r+0xb2>
 80020b6:	2b16      	cmp	r3, #22
 80020b8:	d101      	bne.n	80020be <__sflush_r+0xb6>
 80020ba:	602f      	str	r7, [r5, #0]
 80020bc:	e7b1      	b.n	8002022 <__sflush_r+0x1a>
 80020be:	89a3      	ldrh	r3, [r4, #12]
 80020c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c4:	81a3      	strh	r3, [r4, #12]
 80020c6:	e7ad      	b.n	8002024 <__sflush_r+0x1c>
 80020c8:	690f      	ldr	r7, [r1, #16]
 80020ca:	2f00      	cmp	r7, #0
 80020cc:	d0a9      	beq.n	8002022 <__sflush_r+0x1a>
 80020ce:	0793      	lsls	r3, r2, #30
 80020d0:	680e      	ldr	r6, [r1, #0]
 80020d2:	bf08      	it	eq
 80020d4:	694b      	ldreq	r3, [r1, #20]
 80020d6:	600f      	str	r7, [r1, #0]
 80020d8:	bf18      	it	ne
 80020da:	2300      	movne	r3, #0
 80020dc:	eba6 0807 	sub.w	r8, r6, r7
 80020e0:	608b      	str	r3, [r1, #8]
 80020e2:	f1b8 0f00 	cmp.w	r8, #0
 80020e6:	dd9c      	ble.n	8002022 <__sflush_r+0x1a>
 80020e8:	6a21      	ldr	r1, [r4, #32]
 80020ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020ec:	4643      	mov	r3, r8
 80020ee:	463a      	mov	r2, r7
 80020f0:	4628      	mov	r0, r5
 80020f2:	47b0      	blx	r6
 80020f4:	2800      	cmp	r0, #0
 80020f6:	dc06      	bgt.n	8002106 <__sflush_r+0xfe>
 80020f8:	89a3      	ldrh	r3, [r4, #12]
 80020fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fe:	81a3      	strh	r3, [r4, #12]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	e78e      	b.n	8002024 <__sflush_r+0x1c>
 8002106:	4407      	add	r7, r0
 8002108:	eba8 0800 	sub.w	r8, r8, r0
 800210c:	e7e9      	b.n	80020e2 <__sflush_r+0xda>
 800210e:	bf00      	nop
 8002110:	20400001 	.word	0x20400001

08002114 <_fflush_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	690b      	ldr	r3, [r1, #16]
 8002118:	4605      	mov	r5, r0
 800211a:	460c      	mov	r4, r1
 800211c:	b913      	cbnz	r3, 8002124 <_fflush_r+0x10>
 800211e:	2500      	movs	r5, #0
 8002120:	4628      	mov	r0, r5
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	b118      	cbz	r0, 800212e <_fflush_r+0x1a>
 8002126:	6983      	ldr	r3, [r0, #24]
 8002128:	b90b      	cbnz	r3, 800212e <_fflush_r+0x1a>
 800212a:	f000 f887 	bl	800223c <__sinit>
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <_fflush_r+0x6c>)
 8002130:	429c      	cmp	r4, r3
 8002132:	d11b      	bne.n	800216c <_fflush_r+0x58>
 8002134:	686c      	ldr	r4, [r5, #4]
 8002136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ef      	beq.n	800211e <_fflush_r+0xa>
 800213e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002140:	07d0      	lsls	r0, r2, #31
 8002142:	d404      	bmi.n	800214e <_fflush_r+0x3a>
 8002144:	0599      	lsls	r1, r3, #22
 8002146:	d402      	bmi.n	800214e <_fflush_r+0x3a>
 8002148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800214a:	f000 f915 	bl	8002378 <__retarget_lock_acquire_recursive>
 800214e:	4628      	mov	r0, r5
 8002150:	4621      	mov	r1, r4
 8002152:	f7ff ff59 	bl	8002008 <__sflush_r>
 8002156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002158:	07da      	lsls	r2, r3, #31
 800215a:	4605      	mov	r5, r0
 800215c:	d4e0      	bmi.n	8002120 <_fflush_r+0xc>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	059b      	lsls	r3, r3, #22
 8002162:	d4dd      	bmi.n	8002120 <_fflush_r+0xc>
 8002164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002166:	f000 f908 	bl	800237a <__retarget_lock_release_recursive>
 800216a:	e7d9      	b.n	8002120 <_fflush_r+0xc>
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <_fflush_r+0x70>)
 800216e:	429c      	cmp	r4, r3
 8002170:	d101      	bne.n	8002176 <_fflush_r+0x62>
 8002172:	68ac      	ldr	r4, [r5, #8]
 8002174:	e7df      	b.n	8002136 <_fflush_r+0x22>
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <_fflush_r+0x74>)
 8002178:	429c      	cmp	r4, r3
 800217a:	bf08      	it	eq
 800217c:	68ec      	ldreq	r4, [r5, #12]
 800217e:	e7da      	b.n	8002136 <_fflush_r+0x22>
 8002180:	08002db0 	.word	0x08002db0
 8002184:	08002dd0 	.word	0x08002dd0
 8002188:	08002d90 	.word	0x08002d90

0800218c <std>:
 800218c:	2300      	movs	r3, #0
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	e9c0 3300 	strd	r3, r3, [r0]
 8002196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800219a:	6083      	str	r3, [r0, #8]
 800219c:	8181      	strh	r1, [r0, #12]
 800219e:	6643      	str	r3, [r0, #100]	; 0x64
 80021a0:	81c2      	strh	r2, [r0, #14]
 80021a2:	6183      	str	r3, [r0, #24]
 80021a4:	4619      	mov	r1, r3
 80021a6:	2208      	movs	r2, #8
 80021a8:	305c      	adds	r0, #92	; 0x5c
 80021aa:	f7ff fd09 	bl	8001bc0 <memset>
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <std+0x38>)
 80021b0:	6263      	str	r3, [r4, #36]	; 0x24
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <std+0x3c>)
 80021b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <std+0x40>)
 80021b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <std+0x44>)
 80021bc:	6224      	str	r4, [r4, #32]
 80021be:	6323      	str	r3, [r4, #48]	; 0x30
 80021c0:	bd10      	pop	{r4, pc}
 80021c2:	bf00      	nop
 80021c4:	08002ba5 	.word	0x08002ba5
 80021c8:	08002bc7 	.word	0x08002bc7
 80021cc:	08002bff 	.word	0x08002bff
 80021d0:	08002c23 	.word	0x08002c23

080021d4 <_cleanup_r>:
 80021d4:	4901      	ldr	r1, [pc, #4]	; (80021dc <_cleanup_r+0x8>)
 80021d6:	f000 b8af 	b.w	8002338 <_fwalk_reent>
 80021da:	bf00      	nop
 80021dc:	08002115 	.word	0x08002115

080021e0 <__sfmoreglue>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	1e4a      	subs	r2, r1, #1
 80021e4:	2568      	movs	r5, #104	; 0x68
 80021e6:	4355      	muls	r5, r2
 80021e8:	460e      	mov	r6, r1
 80021ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ee:	f000 f981 	bl	80024f4 <_malloc_r>
 80021f2:	4604      	mov	r4, r0
 80021f4:	b140      	cbz	r0, 8002208 <__sfmoreglue+0x28>
 80021f6:	2100      	movs	r1, #0
 80021f8:	e9c0 1600 	strd	r1, r6, [r0]
 80021fc:	300c      	adds	r0, #12
 80021fe:	60a0      	str	r0, [r4, #8]
 8002200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002204:	f7ff fcdc 	bl	8001bc0 <memset>
 8002208:	4620      	mov	r0, r4
 800220a:	bd70      	pop	{r4, r5, r6, pc}

0800220c <__sfp_lock_acquire>:
 800220c:	4801      	ldr	r0, [pc, #4]	; (8002214 <__sfp_lock_acquire+0x8>)
 800220e:	f000 b8b3 	b.w	8002378 <__retarget_lock_acquire_recursive>
 8002212:	bf00      	nop
 8002214:	200001d0 	.word	0x200001d0

08002218 <__sfp_lock_release>:
 8002218:	4801      	ldr	r0, [pc, #4]	; (8002220 <__sfp_lock_release+0x8>)
 800221a:	f000 b8ae 	b.w	800237a <__retarget_lock_release_recursive>
 800221e:	bf00      	nop
 8002220:	200001d0 	.word	0x200001d0

08002224 <__sinit_lock_acquire>:
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <__sinit_lock_acquire+0x8>)
 8002226:	f000 b8a7 	b.w	8002378 <__retarget_lock_acquire_recursive>
 800222a:	bf00      	nop
 800222c:	200001cb 	.word	0x200001cb

08002230 <__sinit_lock_release>:
 8002230:	4801      	ldr	r0, [pc, #4]	; (8002238 <__sinit_lock_release+0x8>)
 8002232:	f000 b8a2 	b.w	800237a <__retarget_lock_release_recursive>
 8002236:	bf00      	nop
 8002238:	200001cb 	.word	0x200001cb

0800223c <__sinit>:
 800223c:	b510      	push	{r4, lr}
 800223e:	4604      	mov	r4, r0
 8002240:	f7ff fff0 	bl	8002224 <__sinit_lock_acquire>
 8002244:	69a3      	ldr	r3, [r4, #24]
 8002246:	b11b      	cbz	r3, 8002250 <__sinit+0x14>
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224c:	f7ff bff0 	b.w	8002230 <__sinit_lock_release>
 8002250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002254:	6523      	str	r3, [r4, #80]	; 0x50
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <__sinit+0x68>)
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <__sinit+0x6c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	62a2      	str	r2, [r4, #40]	; 0x28
 800225e:	42a3      	cmp	r3, r4
 8002260:	bf04      	itt	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	61a3      	streq	r3, [r4, #24]
 8002266:	4620      	mov	r0, r4
 8002268:	f000 f820 	bl	80022ac <__sfp>
 800226c:	6060      	str	r0, [r4, #4]
 800226e:	4620      	mov	r0, r4
 8002270:	f000 f81c 	bl	80022ac <__sfp>
 8002274:	60a0      	str	r0, [r4, #8]
 8002276:	4620      	mov	r0, r4
 8002278:	f000 f818 	bl	80022ac <__sfp>
 800227c:	2200      	movs	r2, #0
 800227e:	60e0      	str	r0, [r4, #12]
 8002280:	2104      	movs	r1, #4
 8002282:	6860      	ldr	r0, [r4, #4]
 8002284:	f7ff ff82 	bl	800218c <std>
 8002288:	68a0      	ldr	r0, [r4, #8]
 800228a:	2201      	movs	r2, #1
 800228c:	2109      	movs	r1, #9
 800228e:	f7ff ff7d 	bl	800218c <std>
 8002292:	68e0      	ldr	r0, [r4, #12]
 8002294:	2202      	movs	r2, #2
 8002296:	2112      	movs	r1, #18
 8002298:	f7ff ff78 	bl	800218c <std>
 800229c:	2301      	movs	r3, #1
 800229e:	61a3      	str	r3, [r4, #24]
 80022a0:	e7d2      	b.n	8002248 <__sinit+0xc>
 80022a2:	bf00      	nop
 80022a4:	08002d8c 	.word	0x08002d8c
 80022a8:	080021d5 	.word	0x080021d5

080022ac <__sfp>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	4607      	mov	r7, r0
 80022b0:	f7ff ffac 	bl	800220c <__sfp_lock_acquire>
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <__sfp+0x84>)
 80022b6:	681e      	ldr	r6, [r3, #0]
 80022b8:	69b3      	ldr	r3, [r6, #24]
 80022ba:	b913      	cbnz	r3, 80022c2 <__sfp+0x16>
 80022bc:	4630      	mov	r0, r6
 80022be:	f7ff ffbd 	bl	800223c <__sinit>
 80022c2:	3648      	adds	r6, #72	; 0x48
 80022c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	d503      	bpl.n	80022d4 <__sfp+0x28>
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	b30b      	cbz	r3, 8002314 <__sfp+0x68>
 80022d0:	6836      	ldr	r6, [r6, #0]
 80022d2:	e7f7      	b.n	80022c4 <__sfp+0x18>
 80022d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022d8:	b9d5      	cbnz	r5, 8002310 <__sfp+0x64>
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <__sfp+0x88>)
 80022dc:	60e3      	str	r3, [r4, #12]
 80022de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022e2:	6665      	str	r5, [r4, #100]	; 0x64
 80022e4:	f000 f847 	bl	8002376 <__retarget_lock_init_recursive>
 80022e8:	f7ff ff96 	bl	8002218 <__sfp_lock_release>
 80022ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022f4:	6025      	str	r5, [r4, #0]
 80022f6:	61a5      	str	r5, [r4, #24]
 80022f8:	2208      	movs	r2, #8
 80022fa:	4629      	mov	r1, r5
 80022fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002300:	f7ff fc5e 	bl	8001bc0 <memset>
 8002304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800230c:	4620      	mov	r0, r4
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002310:	3468      	adds	r4, #104	; 0x68
 8002312:	e7d9      	b.n	80022c8 <__sfp+0x1c>
 8002314:	2104      	movs	r1, #4
 8002316:	4638      	mov	r0, r7
 8002318:	f7ff ff62 	bl	80021e0 <__sfmoreglue>
 800231c:	4604      	mov	r4, r0
 800231e:	6030      	str	r0, [r6, #0]
 8002320:	2800      	cmp	r0, #0
 8002322:	d1d5      	bne.n	80022d0 <__sfp+0x24>
 8002324:	f7ff ff78 	bl	8002218 <__sfp_lock_release>
 8002328:	230c      	movs	r3, #12
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	e7ee      	b.n	800230c <__sfp+0x60>
 800232e:	bf00      	nop
 8002330:	08002d8c 	.word	0x08002d8c
 8002334:	ffff0001 	.word	0xffff0001

08002338 <_fwalk_reent>:
 8002338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800233c:	4606      	mov	r6, r0
 800233e:	4688      	mov	r8, r1
 8002340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002344:	2700      	movs	r7, #0
 8002346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800234a:	f1b9 0901 	subs.w	r9, r9, #1
 800234e:	d505      	bpl.n	800235c <_fwalk_reent+0x24>
 8002350:	6824      	ldr	r4, [r4, #0]
 8002352:	2c00      	cmp	r4, #0
 8002354:	d1f7      	bne.n	8002346 <_fwalk_reent+0xe>
 8002356:	4638      	mov	r0, r7
 8002358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800235c:	89ab      	ldrh	r3, [r5, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d907      	bls.n	8002372 <_fwalk_reent+0x3a>
 8002362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002366:	3301      	adds	r3, #1
 8002368:	d003      	beq.n	8002372 <_fwalk_reent+0x3a>
 800236a:	4629      	mov	r1, r5
 800236c:	4630      	mov	r0, r6
 800236e:	47c0      	blx	r8
 8002370:	4307      	orrs	r7, r0
 8002372:	3568      	adds	r5, #104	; 0x68
 8002374:	e7e9      	b.n	800234a <_fwalk_reent+0x12>

08002376 <__retarget_lock_init_recursive>:
 8002376:	4770      	bx	lr

08002378 <__retarget_lock_acquire_recursive>:
 8002378:	4770      	bx	lr

0800237a <__retarget_lock_release_recursive>:
 800237a:	4770      	bx	lr

0800237c <__swhatbuf_r>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	460e      	mov	r6, r1
 8002380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002384:	2900      	cmp	r1, #0
 8002386:	b096      	sub	sp, #88	; 0x58
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	da07      	bge.n	800239e <__swhatbuf_r+0x22>
 800238e:	2300      	movs	r3, #0
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	89b3      	ldrh	r3, [r6, #12]
 8002394:	061a      	lsls	r2, r3, #24
 8002396:	d410      	bmi.n	80023ba <__swhatbuf_r+0x3e>
 8002398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239c:	e00e      	b.n	80023bc <__swhatbuf_r+0x40>
 800239e:	466a      	mov	r2, sp
 80023a0:	f000 fc54 	bl	8002c4c <_fstat_r>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	dbf2      	blt.n	800238e <__swhatbuf_r+0x12>
 80023a8:	9a01      	ldr	r2, [sp, #4]
 80023aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80023ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80023b2:	425a      	negs	r2, r3
 80023b4:	415a      	adcs	r2, r3
 80023b6:	602a      	str	r2, [r5, #0]
 80023b8:	e7ee      	b.n	8002398 <__swhatbuf_r+0x1c>
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	2000      	movs	r0, #0
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	b016      	add	sp, #88	; 0x58
 80023c2:	bd70      	pop	{r4, r5, r6, pc}

080023c4 <__smakebuf_r>:
 80023c4:	898b      	ldrh	r3, [r1, #12]
 80023c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023c8:	079d      	lsls	r5, r3, #30
 80023ca:	4606      	mov	r6, r0
 80023cc:	460c      	mov	r4, r1
 80023ce:	d507      	bpl.n	80023e0 <__smakebuf_r+0x1c>
 80023d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	6123      	str	r3, [r4, #16]
 80023d8:	2301      	movs	r3, #1
 80023da:	6163      	str	r3, [r4, #20]
 80023dc:	b002      	add	sp, #8
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	ab01      	add	r3, sp, #4
 80023e2:	466a      	mov	r2, sp
 80023e4:	f7ff ffca 	bl	800237c <__swhatbuf_r>
 80023e8:	9900      	ldr	r1, [sp, #0]
 80023ea:	4605      	mov	r5, r0
 80023ec:	4630      	mov	r0, r6
 80023ee:	f000 f881 	bl	80024f4 <_malloc_r>
 80023f2:	b948      	cbnz	r0, 8002408 <__smakebuf_r+0x44>
 80023f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023f8:	059a      	lsls	r2, r3, #22
 80023fa:	d4ef      	bmi.n	80023dc <__smakebuf_r+0x18>
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	81a3      	strh	r3, [r4, #12]
 8002406:	e7e3      	b.n	80023d0 <__smakebuf_r+0xc>
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <__smakebuf_r+0x7c>)
 800240a:	62b3      	str	r3, [r6, #40]	; 0x28
 800240c:	89a3      	ldrh	r3, [r4, #12]
 800240e:	6020      	str	r0, [r4, #0]
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	81a3      	strh	r3, [r4, #12]
 8002416:	9b00      	ldr	r3, [sp, #0]
 8002418:	6163      	str	r3, [r4, #20]
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	6120      	str	r0, [r4, #16]
 800241e:	b15b      	cbz	r3, 8002438 <__smakebuf_r+0x74>
 8002420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002424:	4630      	mov	r0, r6
 8002426:	f000 fc23 	bl	8002c70 <_isatty_r>
 800242a:	b128      	cbz	r0, 8002438 <__smakebuf_r+0x74>
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	81a3      	strh	r3, [r4, #12]
 8002438:	89a0      	ldrh	r0, [r4, #12]
 800243a:	4305      	orrs	r5, r0
 800243c:	81a5      	strh	r5, [r4, #12]
 800243e:	e7cd      	b.n	80023dc <__smakebuf_r+0x18>
 8002440:	080021d5 	.word	0x080021d5

08002444 <malloc>:
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <malloc+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f000 b853 	b.w	80024f4 <_malloc_r>
 800244e:	bf00      	nop
 8002450:	2000002c 	.word	0x2000002c

08002454 <_free_r>:
 8002454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002456:	2900      	cmp	r1, #0
 8002458:	d048      	beq.n	80024ec <_free_r+0x98>
 800245a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800245e:	9001      	str	r0, [sp, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f1a1 0404 	sub.w	r4, r1, #4
 8002466:	bfb8      	it	lt
 8002468:	18e4      	addlt	r4, r4, r3
 800246a:	f000 fc23 	bl	8002cb4 <__malloc_lock>
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <_free_r+0x9c>)
 8002470:	9801      	ldr	r0, [sp, #4]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	4615      	mov	r5, r2
 8002476:	b933      	cbnz	r3, 8002486 <_free_r+0x32>
 8002478:	6063      	str	r3, [r4, #4]
 800247a:	6014      	str	r4, [r2, #0]
 800247c:	b003      	add	sp, #12
 800247e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002482:	f000 bc1d 	b.w	8002cc0 <__malloc_unlock>
 8002486:	42a3      	cmp	r3, r4
 8002488:	d90b      	bls.n	80024a2 <_free_r+0x4e>
 800248a:	6821      	ldr	r1, [r4, #0]
 800248c:	1862      	adds	r2, r4, r1
 800248e:	4293      	cmp	r3, r2
 8002490:	bf04      	itt	eq
 8002492:	681a      	ldreq	r2, [r3, #0]
 8002494:	685b      	ldreq	r3, [r3, #4]
 8002496:	6063      	str	r3, [r4, #4]
 8002498:	bf04      	itt	eq
 800249a:	1852      	addeq	r2, r2, r1
 800249c:	6022      	streq	r2, [r4, #0]
 800249e:	602c      	str	r4, [r5, #0]
 80024a0:	e7ec      	b.n	800247c <_free_r+0x28>
 80024a2:	461a      	mov	r2, r3
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	b10b      	cbz	r3, 80024ac <_free_r+0x58>
 80024a8:	42a3      	cmp	r3, r4
 80024aa:	d9fa      	bls.n	80024a2 <_free_r+0x4e>
 80024ac:	6811      	ldr	r1, [r2, #0]
 80024ae:	1855      	adds	r5, r2, r1
 80024b0:	42a5      	cmp	r5, r4
 80024b2:	d10b      	bne.n	80024cc <_free_r+0x78>
 80024b4:	6824      	ldr	r4, [r4, #0]
 80024b6:	4421      	add	r1, r4
 80024b8:	1854      	adds	r4, r2, r1
 80024ba:	42a3      	cmp	r3, r4
 80024bc:	6011      	str	r1, [r2, #0]
 80024be:	d1dd      	bne.n	800247c <_free_r+0x28>
 80024c0:	681c      	ldr	r4, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	6053      	str	r3, [r2, #4]
 80024c6:	4421      	add	r1, r4
 80024c8:	6011      	str	r1, [r2, #0]
 80024ca:	e7d7      	b.n	800247c <_free_r+0x28>
 80024cc:	d902      	bls.n	80024d4 <_free_r+0x80>
 80024ce:	230c      	movs	r3, #12
 80024d0:	6003      	str	r3, [r0, #0]
 80024d2:	e7d3      	b.n	800247c <_free_r+0x28>
 80024d4:	6825      	ldr	r5, [r4, #0]
 80024d6:	1961      	adds	r1, r4, r5
 80024d8:	428b      	cmp	r3, r1
 80024da:	bf04      	itt	eq
 80024dc:	6819      	ldreq	r1, [r3, #0]
 80024de:	685b      	ldreq	r3, [r3, #4]
 80024e0:	6063      	str	r3, [r4, #4]
 80024e2:	bf04      	itt	eq
 80024e4:	1949      	addeq	r1, r1, r5
 80024e6:	6021      	streq	r1, [r4, #0]
 80024e8:	6054      	str	r4, [r2, #4]
 80024ea:	e7c7      	b.n	800247c <_free_r+0x28>
 80024ec:	b003      	add	sp, #12
 80024ee:	bd30      	pop	{r4, r5, pc}
 80024f0:	200001c0 	.word	0x200001c0

080024f4 <_malloc_r>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	1ccd      	adds	r5, r1, #3
 80024f8:	f025 0503 	bic.w	r5, r5, #3
 80024fc:	3508      	adds	r5, #8
 80024fe:	2d0c      	cmp	r5, #12
 8002500:	bf38      	it	cc
 8002502:	250c      	movcc	r5, #12
 8002504:	2d00      	cmp	r5, #0
 8002506:	4606      	mov	r6, r0
 8002508:	db01      	blt.n	800250e <_malloc_r+0x1a>
 800250a:	42a9      	cmp	r1, r5
 800250c:	d903      	bls.n	8002516 <_malloc_r+0x22>
 800250e:	230c      	movs	r3, #12
 8002510:	6033      	str	r3, [r6, #0]
 8002512:	2000      	movs	r0, #0
 8002514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002516:	f000 fbcd 	bl	8002cb4 <__malloc_lock>
 800251a:	4921      	ldr	r1, [pc, #132]	; (80025a0 <_malloc_r+0xac>)
 800251c:	680a      	ldr	r2, [r1, #0]
 800251e:	4614      	mov	r4, r2
 8002520:	b99c      	cbnz	r4, 800254a <_malloc_r+0x56>
 8002522:	4f20      	ldr	r7, [pc, #128]	; (80025a4 <_malloc_r+0xb0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b923      	cbnz	r3, 8002532 <_malloc_r+0x3e>
 8002528:	4621      	mov	r1, r4
 800252a:	4630      	mov	r0, r6
 800252c:	f000 fb2a 	bl	8002b84 <_sbrk_r>
 8002530:	6038      	str	r0, [r7, #0]
 8002532:	4629      	mov	r1, r5
 8002534:	4630      	mov	r0, r6
 8002536:	f000 fb25 	bl	8002b84 <_sbrk_r>
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	d123      	bne.n	8002586 <_malloc_r+0x92>
 800253e:	230c      	movs	r3, #12
 8002540:	6033      	str	r3, [r6, #0]
 8002542:	4630      	mov	r0, r6
 8002544:	f000 fbbc 	bl	8002cc0 <__malloc_unlock>
 8002548:	e7e3      	b.n	8002512 <_malloc_r+0x1e>
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	1b5b      	subs	r3, r3, r5
 800254e:	d417      	bmi.n	8002580 <_malloc_r+0x8c>
 8002550:	2b0b      	cmp	r3, #11
 8002552:	d903      	bls.n	800255c <_malloc_r+0x68>
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	441c      	add	r4, r3
 8002558:	6025      	str	r5, [r4, #0]
 800255a:	e004      	b.n	8002566 <_malloc_r+0x72>
 800255c:	6863      	ldr	r3, [r4, #4]
 800255e:	42a2      	cmp	r2, r4
 8002560:	bf0c      	ite	eq
 8002562:	600b      	streq	r3, [r1, #0]
 8002564:	6053      	strne	r3, [r2, #4]
 8002566:	4630      	mov	r0, r6
 8002568:	f000 fbaa 	bl	8002cc0 <__malloc_unlock>
 800256c:	f104 000b 	add.w	r0, r4, #11
 8002570:	1d23      	adds	r3, r4, #4
 8002572:	f020 0007 	bic.w	r0, r0, #7
 8002576:	1ac2      	subs	r2, r0, r3
 8002578:	d0cc      	beq.n	8002514 <_malloc_r+0x20>
 800257a:	1a1b      	subs	r3, r3, r0
 800257c:	50a3      	str	r3, [r4, r2]
 800257e:	e7c9      	b.n	8002514 <_malloc_r+0x20>
 8002580:	4622      	mov	r2, r4
 8002582:	6864      	ldr	r4, [r4, #4]
 8002584:	e7cc      	b.n	8002520 <_malloc_r+0x2c>
 8002586:	1cc4      	adds	r4, r0, #3
 8002588:	f024 0403 	bic.w	r4, r4, #3
 800258c:	42a0      	cmp	r0, r4
 800258e:	d0e3      	beq.n	8002558 <_malloc_r+0x64>
 8002590:	1a21      	subs	r1, r4, r0
 8002592:	4630      	mov	r0, r6
 8002594:	f000 faf6 	bl	8002b84 <_sbrk_r>
 8002598:	3001      	adds	r0, #1
 800259a:	d1dd      	bne.n	8002558 <_malloc_r+0x64>
 800259c:	e7cf      	b.n	800253e <_malloc_r+0x4a>
 800259e:	bf00      	nop
 80025a0:	200001c0 	.word	0x200001c0
 80025a4:	200001c4 	.word	0x200001c4

080025a8 <__sfputc_r>:
 80025a8:	6893      	ldr	r3, [r2, #8]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	b410      	push	{r4}
 80025b0:	6093      	str	r3, [r2, #8]
 80025b2:	da08      	bge.n	80025c6 <__sfputc_r+0x1e>
 80025b4:	6994      	ldr	r4, [r2, #24]
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	db01      	blt.n	80025be <__sfputc_r+0x16>
 80025ba:	290a      	cmp	r1, #10
 80025bc:	d103      	bne.n	80025c6 <__sfputc_r+0x1e>
 80025be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025c2:	f7ff bc61 	b.w	8001e88 <__swbuf_r>
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	1c58      	adds	r0, r3, #1
 80025ca:	6010      	str	r0, [r2, #0]
 80025cc:	7019      	strb	r1, [r3, #0]
 80025ce:	4608      	mov	r0, r1
 80025d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <__sfputs_r>:
 80025d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d8:	4606      	mov	r6, r0
 80025da:	460f      	mov	r7, r1
 80025dc:	4614      	mov	r4, r2
 80025de:	18d5      	adds	r5, r2, r3
 80025e0:	42ac      	cmp	r4, r5
 80025e2:	d101      	bne.n	80025e8 <__sfputs_r+0x12>
 80025e4:	2000      	movs	r0, #0
 80025e6:	e007      	b.n	80025f8 <__sfputs_r+0x22>
 80025e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ec:	463a      	mov	r2, r7
 80025ee:	4630      	mov	r0, r6
 80025f0:	f7ff ffda 	bl	80025a8 <__sfputc_r>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d1f3      	bne.n	80025e0 <__sfputs_r+0xa>
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025fc <_vfiprintf_r>:
 80025fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002600:	460d      	mov	r5, r1
 8002602:	b09d      	sub	sp, #116	; 0x74
 8002604:	4614      	mov	r4, r2
 8002606:	4698      	mov	r8, r3
 8002608:	4606      	mov	r6, r0
 800260a:	b118      	cbz	r0, 8002614 <_vfiprintf_r+0x18>
 800260c:	6983      	ldr	r3, [r0, #24]
 800260e:	b90b      	cbnz	r3, 8002614 <_vfiprintf_r+0x18>
 8002610:	f7ff fe14 	bl	800223c <__sinit>
 8002614:	4b89      	ldr	r3, [pc, #548]	; (800283c <_vfiprintf_r+0x240>)
 8002616:	429d      	cmp	r5, r3
 8002618:	d11b      	bne.n	8002652 <_vfiprintf_r+0x56>
 800261a:	6875      	ldr	r5, [r6, #4]
 800261c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800261e:	07d9      	lsls	r1, r3, #31
 8002620:	d405      	bmi.n	800262e <_vfiprintf_r+0x32>
 8002622:	89ab      	ldrh	r3, [r5, #12]
 8002624:	059a      	lsls	r2, r3, #22
 8002626:	d402      	bmi.n	800262e <_vfiprintf_r+0x32>
 8002628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800262a:	f7ff fea5 	bl	8002378 <__retarget_lock_acquire_recursive>
 800262e:	89ab      	ldrh	r3, [r5, #12]
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	d501      	bpl.n	8002638 <_vfiprintf_r+0x3c>
 8002634:	692b      	ldr	r3, [r5, #16]
 8002636:	b9eb      	cbnz	r3, 8002674 <_vfiprintf_r+0x78>
 8002638:	4629      	mov	r1, r5
 800263a:	4630      	mov	r0, r6
 800263c:	f7ff fc76 	bl	8001f2c <__swsetup_r>
 8002640:	b1c0      	cbz	r0, 8002674 <_vfiprintf_r+0x78>
 8002642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002644:	07dc      	lsls	r4, r3, #31
 8002646:	d50e      	bpl.n	8002666 <_vfiprintf_r+0x6a>
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	b01d      	add	sp, #116	; 0x74
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002652:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <_vfiprintf_r+0x244>)
 8002654:	429d      	cmp	r5, r3
 8002656:	d101      	bne.n	800265c <_vfiprintf_r+0x60>
 8002658:	68b5      	ldr	r5, [r6, #8]
 800265a:	e7df      	b.n	800261c <_vfiprintf_r+0x20>
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <_vfiprintf_r+0x248>)
 800265e:	429d      	cmp	r5, r3
 8002660:	bf08      	it	eq
 8002662:	68f5      	ldreq	r5, [r6, #12]
 8002664:	e7da      	b.n	800261c <_vfiprintf_r+0x20>
 8002666:	89ab      	ldrh	r3, [r5, #12]
 8002668:	0598      	lsls	r0, r3, #22
 800266a:	d4ed      	bmi.n	8002648 <_vfiprintf_r+0x4c>
 800266c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800266e:	f7ff fe84 	bl	800237a <__retarget_lock_release_recursive>
 8002672:	e7e9      	b.n	8002648 <_vfiprintf_r+0x4c>
 8002674:	2300      	movs	r3, #0
 8002676:	9309      	str	r3, [sp, #36]	; 0x24
 8002678:	2320      	movs	r3, #32
 800267a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800267e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002682:	2330      	movs	r3, #48	; 0x30
 8002684:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002848 <_vfiprintf_r+0x24c>
 8002688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800268c:	f04f 0901 	mov.w	r9, #1
 8002690:	4623      	mov	r3, r4
 8002692:	469a      	mov	sl, r3
 8002694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002698:	b10a      	cbz	r2, 800269e <_vfiprintf_r+0xa2>
 800269a:	2a25      	cmp	r2, #37	; 0x25
 800269c:	d1f9      	bne.n	8002692 <_vfiprintf_r+0x96>
 800269e:	ebba 0b04 	subs.w	fp, sl, r4
 80026a2:	d00b      	beq.n	80026bc <_vfiprintf_r+0xc0>
 80026a4:	465b      	mov	r3, fp
 80026a6:	4622      	mov	r2, r4
 80026a8:	4629      	mov	r1, r5
 80026aa:	4630      	mov	r0, r6
 80026ac:	f7ff ff93 	bl	80025d6 <__sfputs_r>
 80026b0:	3001      	adds	r0, #1
 80026b2:	f000 80aa 	beq.w	800280a <_vfiprintf_r+0x20e>
 80026b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026b8:	445a      	add	r2, fp
 80026ba:	9209      	str	r2, [sp, #36]	; 0x24
 80026bc:	f89a 3000 	ldrb.w	r3, [sl]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a2 	beq.w	800280a <_vfiprintf_r+0x20e>
 80026c6:	2300      	movs	r3, #0
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026d0:	f10a 0a01 	add.w	sl, sl, #1
 80026d4:	9304      	str	r3, [sp, #16]
 80026d6:	9307      	str	r3, [sp, #28]
 80026d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026dc:	931a      	str	r3, [sp, #104]	; 0x68
 80026de:	4654      	mov	r4, sl
 80026e0:	2205      	movs	r2, #5
 80026e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026e6:	4858      	ldr	r0, [pc, #352]	; (8002848 <_vfiprintf_r+0x24c>)
 80026e8:	f7fd fd72 	bl	80001d0 <memchr>
 80026ec:	9a04      	ldr	r2, [sp, #16]
 80026ee:	b9d8      	cbnz	r0, 8002728 <_vfiprintf_r+0x12c>
 80026f0:	06d1      	lsls	r1, r2, #27
 80026f2:	bf44      	itt	mi
 80026f4:	2320      	movmi	r3, #32
 80026f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026fa:	0713      	lsls	r3, r2, #28
 80026fc:	bf44      	itt	mi
 80026fe:	232b      	movmi	r3, #43	; 0x2b
 8002700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002704:	f89a 3000 	ldrb.w	r3, [sl]
 8002708:	2b2a      	cmp	r3, #42	; 0x2a
 800270a:	d015      	beq.n	8002738 <_vfiprintf_r+0x13c>
 800270c:	9a07      	ldr	r2, [sp, #28]
 800270e:	4654      	mov	r4, sl
 8002710:	2000      	movs	r0, #0
 8002712:	f04f 0c0a 	mov.w	ip, #10
 8002716:	4621      	mov	r1, r4
 8002718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800271c:	3b30      	subs	r3, #48	; 0x30
 800271e:	2b09      	cmp	r3, #9
 8002720:	d94e      	bls.n	80027c0 <_vfiprintf_r+0x1c4>
 8002722:	b1b0      	cbz	r0, 8002752 <_vfiprintf_r+0x156>
 8002724:	9207      	str	r2, [sp, #28]
 8002726:	e014      	b.n	8002752 <_vfiprintf_r+0x156>
 8002728:	eba0 0308 	sub.w	r3, r0, r8
 800272c:	fa09 f303 	lsl.w	r3, r9, r3
 8002730:	4313      	orrs	r3, r2
 8002732:	9304      	str	r3, [sp, #16]
 8002734:	46a2      	mov	sl, r4
 8002736:	e7d2      	b.n	80026de <_vfiprintf_r+0xe2>
 8002738:	9b03      	ldr	r3, [sp, #12]
 800273a:	1d19      	adds	r1, r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	9103      	str	r1, [sp, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	bfbb      	ittet	lt
 8002744:	425b      	neglt	r3, r3
 8002746:	f042 0202 	orrlt.w	r2, r2, #2
 800274a:	9307      	strge	r3, [sp, #28]
 800274c:	9307      	strlt	r3, [sp, #28]
 800274e:	bfb8      	it	lt
 8002750:	9204      	strlt	r2, [sp, #16]
 8002752:	7823      	ldrb	r3, [r4, #0]
 8002754:	2b2e      	cmp	r3, #46	; 0x2e
 8002756:	d10c      	bne.n	8002772 <_vfiprintf_r+0x176>
 8002758:	7863      	ldrb	r3, [r4, #1]
 800275a:	2b2a      	cmp	r3, #42	; 0x2a
 800275c:	d135      	bne.n	80027ca <_vfiprintf_r+0x1ce>
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	9203      	str	r2, [sp, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfb8      	it	lt
 800276a:	f04f 33ff 	movlt.w	r3, #4294967295
 800276e:	3402      	adds	r4, #2
 8002770:	9305      	str	r3, [sp, #20]
 8002772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002858 <_vfiprintf_r+0x25c>
 8002776:	7821      	ldrb	r1, [r4, #0]
 8002778:	2203      	movs	r2, #3
 800277a:	4650      	mov	r0, sl
 800277c:	f7fd fd28 	bl	80001d0 <memchr>
 8002780:	b140      	cbz	r0, 8002794 <_vfiprintf_r+0x198>
 8002782:	2340      	movs	r3, #64	; 0x40
 8002784:	eba0 000a 	sub.w	r0, r0, sl
 8002788:	fa03 f000 	lsl.w	r0, r3, r0
 800278c:	9b04      	ldr	r3, [sp, #16]
 800278e:	4303      	orrs	r3, r0
 8002790:	3401      	adds	r4, #1
 8002792:	9304      	str	r3, [sp, #16]
 8002794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <_vfiprintf_r+0x250>)
 800279a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800279e:	2206      	movs	r2, #6
 80027a0:	f7fd fd16 	bl	80001d0 <memchr>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d03f      	beq.n	8002828 <_vfiprintf_r+0x22c>
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <_vfiprintf_r+0x254>)
 80027aa:	bb1b      	cbnz	r3, 80027f4 <_vfiprintf_r+0x1f8>
 80027ac:	9b03      	ldr	r3, [sp, #12]
 80027ae:	3307      	adds	r3, #7
 80027b0:	f023 0307 	bic.w	r3, r3, #7
 80027b4:	3308      	adds	r3, #8
 80027b6:	9303      	str	r3, [sp, #12]
 80027b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ba:	443b      	add	r3, r7
 80027bc:	9309      	str	r3, [sp, #36]	; 0x24
 80027be:	e767      	b.n	8002690 <_vfiprintf_r+0x94>
 80027c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80027c4:	460c      	mov	r4, r1
 80027c6:	2001      	movs	r0, #1
 80027c8:	e7a5      	b.n	8002716 <_vfiprintf_r+0x11a>
 80027ca:	2300      	movs	r3, #0
 80027cc:	3401      	adds	r4, #1
 80027ce:	9305      	str	r3, [sp, #20]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 0c0a 	mov.w	ip, #10
 80027d6:	4620      	mov	r0, r4
 80027d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027dc:	3a30      	subs	r2, #48	; 0x30
 80027de:	2a09      	cmp	r2, #9
 80027e0:	d903      	bls.n	80027ea <_vfiprintf_r+0x1ee>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0c5      	beq.n	8002772 <_vfiprintf_r+0x176>
 80027e6:	9105      	str	r1, [sp, #20]
 80027e8:	e7c3      	b.n	8002772 <_vfiprintf_r+0x176>
 80027ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80027ee:	4604      	mov	r4, r0
 80027f0:	2301      	movs	r3, #1
 80027f2:	e7f0      	b.n	80027d6 <_vfiprintf_r+0x1da>
 80027f4:	ab03      	add	r3, sp, #12
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	462a      	mov	r2, r5
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <_vfiprintf_r+0x258>)
 80027fc:	a904      	add	r1, sp, #16
 80027fe:	4630      	mov	r0, r6
 8002800:	f3af 8000 	nop.w
 8002804:	4607      	mov	r7, r0
 8002806:	1c78      	adds	r0, r7, #1
 8002808:	d1d6      	bne.n	80027b8 <_vfiprintf_r+0x1bc>
 800280a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800280c:	07d9      	lsls	r1, r3, #31
 800280e:	d405      	bmi.n	800281c <_vfiprintf_r+0x220>
 8002810:	89ab      	ldrh	r3, [r5, #12]
 8002812:	059a      	lsls	r2, r3, #22
 8002814:	d402      	bmi.n	800281c <_vfiprintf_r+0x220>
 8002816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002818:	f7ff fdaf 	bl	800237a <__retarget_lock_release_recursive>
 800281c:	89ab      	ldrh	r3, [r5, #12]
 800281e:	065b      	lsls	r3, r3, #25
 8002820:	f53f af12 	bmi.w	8002648 <_vfiprintf_r+0x4c>
 8002824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002826:	e711      	b.n	800264c <_vfiprintf_r+0x50>
 8002828:	ab03      	add	r3, sp, #12
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	462a      	mov	r2, r5
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <_vfiprintf_r+0x258>)
 8002830:	a904      	add	r1, sp, #16
 8002832:	4630      	mov	r0, r6
 8002834:	f000 f880 	bl	8002938 <_printf_i>
 8002838:	e7e4      	b.n	8002804 <_vfiprintf_r+0x208>
 800283a:	bf00      	nop
 800283c:	08002db0 	.word	0x08002db0
 8002840:	08002dd0 	.word	0x08002dd0
 8002844:	08002d90 	.word	0x08002d90
 8002848:	08002df0 	.word	0x08002df0
 800284c:	08002dfa 	.word	0x08002dfa
 8002850:	00000000 	.word	0x00000000
 8002854:	080025d7 	.word	0x080025d7
 8002858:	08002df6 	.word	0x08002df6

0800285c <_printf_common>:
 800285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002860:	4616      	mov	r6, r2
 8002862:	4699      	mov	r9, r3
 8002864:	688a      	ldr	r2, [r1, #8]
 8002866:	690b      	ldr	r3, [r1, #16]
 8002868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800286c:	4293      	cmp	r3, r2
 800286e:	bfb8      	it	lt
 8002870:	4613      	movlt	r3, r2
 8002872:	6033      	str	r3, [r6, #0]
 8002874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002878:	4607      	mov	r7, r0
 800287a:	460c      	mov	r4, r1
 800287c:	b10a      	cbz	r2, 8002882 <_printf_common+0x26>
 800287e:	3301      	adds	r3, #1
 8002880:	6033      	str	r3, [r6, #0]
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	0699      	lsls	r1, r3, #26
 8002886:	bf42      	ittt	mi
 8002888:	6833      	ldrmi	r3, [r6, #0]
 800288a:	3302      	addmi	r3, #2
 800288c:	6033      	strmi	r3, [r6, #0]
 800288e:	6825      	ldr	r5, [r4, #0]
 8002890:	f015 0506 	ands.w	r5, r5, #6
 8002894:	d106      	bne.n	80028a4 <_printf_common+0x48>
 8002896:	f104 0a19 	add.w	sl, r4, #25
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	6832      	ldr	r2, [r6, #0]
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	dc26      	bgt.n	80028f2 <_printf_common+0x96>
 80028a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028a8:	1e13      	subs	r3, r2, #0
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	bf18      	it	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	0692      	lsls	r2, r2, #26
 80028b2:	d42b      	bmi.n	800290c <_printf_common+0xb0>
 80028b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028b8:	4649      	mov	r1, r9
 80028ba:	4638      	mov	r0, r7
 80028bc:	47c0      	blx	r8
 80028be:	3001      	adds	r0, #1
 80028c0:	d01e      	beq.n	8002900 <_printf_common+0xa4>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	68e5      	ldr	r5, [r4, #12]
 80028c6:	6832      	ldr	r2, [r6, #0]
 80028c8:	f003 0306 	and.w	r3, r3, #6
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	bf08      	it	eq
 80028d0:	1aad      	subeq	r5, r5, r2
 80028d2:	68a3      	ldr	r3, [r4, #8]
 80028d4:	6922      	ldr	r2, [r4, #16]
 80028d6:	bf0c      	ite	eq
 80028d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028dc:	2500      	movne	r5, #0
 80028de:	4293      	cmp	r3, r2
 80028e0:	bfc4      	itt	gt
 80028e2:	1a9b      	subgt	r3, r3, r2
 80028e4:	18ed      	addgt	r5, r5, r3
 80028e6:	2600      	movs	r6, #0
 80028e8:	341a      	adds	r4, #26
 80028ea:	42b5      	cmp	r5, r6
 80028ec:	d11a      	bne.n	8002924 <_printf_common+0xc8>
 80028ee:	2000      	movs	r0, #0
 80028f0:	e008      	b.n	8002904 <_printf_common+0xa8>
 80028f2:	2301      	movs	r3, #1
 80028f4:	4652      	mov	r2, sl
 80028f6:	4649      	mov	r1, r9
 80028f8:	4638      	mov	r0, r7
 80028fa:	47c0      	blx	r8
 80028fc:	3001      	adds	r0, #1
 80028fe:	d103      	bne.n	8002908 <_printf_common+0xac>
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002908:	3501      	adds	r5, #1
 800290a:	e7c6      	b.n	800289a <_printf_common+0x3e>
 800290c:	18e1      	adds	r1, r4, r3
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	2030      	movs	r0, #48	; 0x30
 8002912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002916:	4422      	add	r2, r4
 8002918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800291c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002920:	3302      	adds	r3, #2
 8002922:	e7c7      	b.n	80028b4 <_printf_common+0x58>
 8002924:	2301      	movs	r3, #1
 8002926:	4622      	mov	r2, r4
 8002928:	4649      	mov	r1, r9
 800292a:	4638      	mov	r0, r7
 800292c:	47c0      	blx	r8
 800292e:	3001      	adds	r0, #1
 8002930:	d0e6      	beq.n	8002900 <_printf_common+0xa4>
 8002932:	3601      	adds	r6, #1
 8002934:	e7d9      	b.n	80028ea <_printf_common+0x8e>
	...

08002938 <_printf_i>:
 8002938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	460c      	mov	r4, r1
 800293e:	4691      	mov	r9, r2
 8002940:	7e27      	ldrb	r7, [r4, #24]
 8002942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002944:	2f78      	cmp	r7, #120	; 0x78
 8002946:	4680      	mov	r8, r0
 8002948:	469a      	mov	sl, r3
 800294a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800294e:	d807      	bhi.n	8002960 <_printf_i+0x28>
 8002950:	2f62      	cmp	r7, #98	; 0x62
 8002952:	d80a      	bhi.n	800296a <_printf_i+0x32>
 8002954:	2f00      	cmp	r7, #0
 8002956:	f000 80d8 	beq.w	8002b0a <_printf_i+0x1d2>
 800295a:	2f58      	cmp	r7, #88	; 0x58
 800295c:	f000 80a3 	beq.w	8002aa6 <_printf_i+0x16e>
 8002960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002968:	e03a      	b.n	80029e0 <_printf_i+0xa8>
 800296a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800296e:	2b15      	cmp	r3, #21
 8002970:	d8f6      	bhi.n	8002960 <_printf_i+0x28>
 8002972:	a001      	add	r0, pc, #4	; (adr r0, 8002978 <_printf_i+0x40>)
 8002974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002978:	080029d1 	.word	0x080029d1
 800297c:	080029e5 	.word	0x080029e5
 8002980:	08002961 	.word	0x08002961
 8002984:	08002961 	.word	0x08002961
 8002988:	08002961 	.word	0x08002961
 800298c:	08002961 	.word	0x08002961
 8002990:	080029e5 	.word	0x080029e5
 8002994:	08002961 	.word	0x08002961
 8002998:	08002961 	.word	0x08002961
 800299c:	08002961 	.word	0x08002961
 80029a0:	08002961 	.word	0x08002961
 80029a4:	08002af1 	.word	0x08002af1
 80029a8:	08002a15 	.word	0x08002a15
 80029ac:	08002ad3 	.word	0x08002ad3
 80029b0:	08002961 	.word	0x08002961
 80029b4:	08002961 	.word	0x08002961
 80029b8:	08002b13 	.word	0x08002b13
 80029bc:	08002961 	.word	0x08002961
 80029c0:	08002a15 	.word	0x08002a15
 80029c4:	08002961 	.word	0x08002961
 80029c8:	08002961 	.word	0x08002961
 80029cc:	08002adb 	.word	0x08002adb
 80029d0:	680b      	ldr	r3, [r1, #0]
 80029d2:	1d1a      	adds	r2, r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	600a      	str	r2, [r1, #0]
 80029d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0a3      	b.n	8002b2c <_printf_i+0x1f4>
 80029e4:	6825      	ldr	r5, [r4, #0]
 80029e6:	6808      	ldr	r0, [r1, #0]
 80029e8:	062e      	lsls	r6, r5, #24
 80029ea:	f100 0304 	add.w	r3, r0, #4
 80029ee:	d50a      	bpl.n	8002a06 <_printf_i+0xce>
 80029f0:	6805      	ldr	r5, [r0, #0]
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	2d00      	cmp	r5, #0
 80029f6:	da03      	bge.n	8002a00 <_printf_i+0xc8>
 80029f8:	232d      	movs	r3, #45	; 0x2d
 80029fa:	426d      	negs	r5, r5
 80029fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a00:	485e      	ldr	r0, [pc, #376]	; (8002b7c <_printf_i+0x244>)
 8002a02:	230a      	movs	r3, #10
 8002a04:	e019      	b.n	8002a3a <_printf_i+0x102>
 8002a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a0a:	6805      	ldr	r5, [r0, #0]
 8002a0c:	600b      	str	r3, [r1, #0]
 8002a0e:	bf18      	it	ne
 8002a10:	b22d      	sxthne	r5, r5
 8002a12:	e7ef      	b.n	80029f4 <_printf_i+0xbc>
 8002a14:	680b      	ldr	r3, [r1, #0]
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	1d18      	adds	r0, r3, #4
 8002a1a:	6008      	str	r0, [r1, #0]
 8002a1c:	0628      	lsls	r0, r5, #24
 8002a1e:	d501      	bpl.n	8002a24 <_printf_i+0xec>
 8002a20:	681d      	ldr	r5, [r3, #0]
 8002a22:	e002      	b.n	8002a2a <_printf_i+0xf2>
 8002a24:	0669      	lsls	r1, r5, #25
 8002a26:	d5fb      	bpl.n	8002a20 <_printf_i+0xe8>
 8002a28:	881d      	ldrh	r5, [r3, #0]
 8002a2a:	4854      	ldr	r0, [pc, #336]	; (8002b7c <_printf_i+0x244>)
 8002a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8002a2e:	bf0c      	ite	eq
 8002a30:	2308      	moveq	r3, #8
 8002a32:	230a      	movne	r3, #10
 8002a34:	2100      	movs	r1, #0
 8002a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a3a:	6866      	ldr	r6, [r4, #4]
 8002a3c:	60a6      	str	r6, [r4, #8]
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	bfa2      	ittt	ge
 8002a42:	6821      	ldrge	r1, [r4, #0]
 8002a44:	f021 0104 	bicge.w	r1, r1, #4
 8002a48:	6021      	strge	r1, [r4, #0]
 8002a4a:	b90d      	cbnz	r5, 8002a50 <_printf_i+0x118>
 8002a4c:	2e00      	cmp	r6, #0
 8002a4e:	d04d      	beq.n	8002aec <_printf_i+0x1b4>
 8002a50:	4616      	mov	r6, r2
 8002a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a56:	fb03 5711 	mls	r7, r3, r1, r5
 8002a5a:	5dc7      	ldrb	r7, [r0, r7]
 8002a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a60:	462f      	mov	r7, r5
 8002a62:	42bb      	cmp	r3, r7
 8002a64:	460d      	mov	r5, r1
 8002a66:	d9f4      	bls.n	8002a52 <_printf_i+0x11a>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d10b      	bne.n	8002a84 <_printf_i+0x14c>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	07df      	lsls	r7, r3, #31
 8002a70:	d508      	bpl.n	8002a84 <_printf_i+0x14c>
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	6861      	ldr	r1, [r4, #4]
 8002a76:	4299      	cmp	r1, r3
 8002a78:	bfde      	ittt	le
 8002a7a:	2330      	movle	r3, #48	; 0x30
 8002a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a84:	1b92      	subs	r2, r2, r6
 8002a86:	6122      	str	r2, [r4, #16]
 8002a88:	f8cd a000 	str.w	sl, [sp]
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	aa03      	add	r2, sp, #12
 8002a90:	4621      	mov	r1, r4
 8002a92:	4640      	mov	r0, r8
 8002a94:	f7ff fee2 	bl	800285c <_printf_common>
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d14c      	bne.n	8002b36 <_printf_i+0x1fe>
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	b004      	add	sp, #16
 8002aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa6:	4835      	ldr	r0, [pc, #212]	; (8002b7c <_printf_i+0x244>)
 8002aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	680e      	ldr	r6, [r1, #0]
 8002ab0:	061f      	lsls	r7, r3, #24
 8002ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ab6:	600e      	str	r6, [r1, #0]
 8002ab8:	d514      	bpl.n	8002ae4 <_printf_i+0x1ac>
 8002aba:	07d9      	lsls	r1, r3, #31
 8002abc:	bf44      	itt	mi
 8002abe:	f043 0320 	orrmi.w	r3, r3, #32
 8002ac2:	6023      	strmi	r3, [r4, #0]
 8002ac4:	b91d      	cbnz	r5, 8002ace <_printf_i+0x196>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	f023 0320 	bic.w	r3, r3, #32
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	2310      	movs	r3, #16
 8002ad0:	e7b0      	b.n	8002a34 <_printf_i+0xfc>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	2378      	movs	r3, #120	; 0x78
 8002adc:	4828      	ldr	r0, [pc, #160]	; (8002b80 <_printf_i+0x248>)
 8002ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ae2:	e7e3      	b.n	8002aac <_printf_i+0x174>
 8002ae4:	065e      	lsls	r6, r3, #25
 8002ae6:	bf48      	it	mi
 8002ae8:	b2ad      	uxthmi	r5, r5
 8002aea:	e7e6      	b.n	8002aba <_printf_i+0x182>
 8002aec:	4616      	mov	r6, r2
 8002aee:	e7bb      	b.n	8002a68 <_printf_i+0x130>
 8002af0:	680b      	ldr	r3, [r1, #0]
 8002af2:	6826      	ldr	r6, [r4, #0]
 8002af4:	6960      	ldr	r0, [r4, #20]
 8002af6:	1d1d      	adds	r5, r3, #4
 8002af8:	600d      	str	r5, [r1, #0]
 8002afa:	0635      	lsls	r5, r6, #24
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	d501      	bpl.n	8002b04 <_printf_i+0x1cc>
 8002b00:	6018      	str	r0, [r3, #0]
 8002b02:	e002      	b.n	8002b0a <_printf_i+0x1d2>
 8002b04:	0671      	lsls	r1, r6, #25
 8002b06:	d5fb      	bpl.n	8002b00 <_printf_i+0x1c8>
 8002b08:	8018      	strh	r0, [r3, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	6123      	str	r3, [r4, #16]
 8002b0e:	4616      	mov	r6, r2
 8002b10:	e7ba      	b.n	8002a88 <_printf_i+0x150>
 8002b12:	680b      	ldr	r3, [r1, #0]
 8002b14:	1d1a      	adds	r2, r3, #4
 8002b16:	600a      	str	r2, [r1, #0]
 8002b18:	681e      	ldr	r6, [r3, #0]
 8002b1a:	6862      	ldr	r2, [r4, #4]
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f7fd fb56 	bl	80001d0 <memchr>
 8002b24:	b108      	cbz	r0, 8002b2a <_printf_i+0x1f2>
 8002b26:	1b80      	subs	r0, r0, r6
 8002b28:	6060      	str	r0, [r4, #4]
 8002b2a:	6863      	ldr	r3, [r4, #4]
 8002b2c:	6123      	str	r3, [r4, #16]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b34:	e7a8      	b.n	8002a88 <_printf_i+0x150>
 8002b36:	6923      	ldr	r3, [r4, #16]
 8002b38:	4632      	mov	r2, r6
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	47d0      	blx	sl
 8002b40:	3001      	adds	r0, #1
 8002b42:	d0ab      	beq.n	8002a9c <_printf_i+0x164>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	079b      	lsls	r3, r3, #30
 8002b48:	d413      	bmi.n	8002b72 <_printf_i+0x23a>
 8002b4a:	68e0      	ldr	r0, [r4, #12]
 8002b4c:	9b03      	ldr	r3, [sp, #12]
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	bfb8      	it	lt
 8002b52:	4618      	movlt	r0, r3
 8002b54:	e7a4      	b.n	8002aa0 <_printf_i+0x168>
 8002b56:	2301      	movs	r3, #1
 8002b58:	4632      	mov	r2, r6
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	47d0      	blx	sl
 8002b60:	3001      	adds	r0, #1
 8002b62:	d09b      	beq.n	8002a9c <_printf_i+0x164>
 8002b64:	3501      	adds	r5, #1
 8002b66:	68e3      	ldr	r3, [r4, #12]
 8002b68:	9903      	ldr	r1, [sp, #12]
 8002b6a:	1a5b      	subs	r3, r3, r1
 8002b6c:	42ab      	cmp	r3, r5
 8002b6e:	dcf2      	bgt.n	8002b56 <_printf_i+0x21e>
 8002b70:	e7eb      	b.n	8002b4a <_printf_i+0x212>
 8002b72:	2500      	movs	r5, #0
 8002b74:	f104 0619 	add.w	r6, r4, #25
 8002b78:	e7f5      	b.n	8002b66 <_printf_i+0x22e>
 8002b7a:	bf00      	nop
 8002b7c:	08002e01 	.word	0x08002e01
 8002b80:	08002e12 	.word	0x08002e12

08002b84 <_sbrk_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4d06      	ldr	r5, [pc, #24]	; (8002ba0 <_sbrk_r+0x1c>)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	602b      	str	r3, [r5, #0]
 8002b90:	f7fe ff02 	bl	8001998 <_sbrk>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_sbrk_r+0x1a>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_sbrk_r+0x1a>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	200001d4 	.word	0x200001d4

08002ba4 <__sread>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bac:	f000 f88e 	bl	8002ccc <_read_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	bfab      	itete	ge
 8002bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bb8:	181b      	addge	r3, r3, r0
 8002bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bbe:	bfac      	ite	ge
 8002bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bc2:	81a3      	strhlt	r3, [r4, #12]
 8002bc4:	bd10      	pop	{r4, pc}

08002bc6 <__swrite>:
 8002bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bca:	461f      	mov	r7, r3
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4616      	mov	r6, r2
 8002bd6:	d505      	bpl.n	8002be4 <__swrite+0x1e>
 8002bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	f000 f856 	bl	8002c90 <_lseek_r>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bee:	81a3      	strh	r3, [r4, #12]
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfa:	f7fe ba25 	b.w	8001048 <_write_r>

08002bfe <__sseek>:
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	460c      	mov	r4, r1
 8002c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c06:	f000 f843 	bl	8002c90 <_lseek_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	bf15      	itete	ne
 8002c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c1a:	81a3      	strheq	r3, [r4, #12]
 8002c1c:	bf18      	it	ne
 8002c1e:	81a3      	strhne	r3, [r4, #12]
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <__sclose>:
 8002c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c26:	f000 b801 	b.w	8002c2c <_close_r>
	...

08002c2c <_close_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4d06      	ldr	r5, [pc, #24]	; (8002c48 <_close_r+0x1c>)
 8002c30:	2300      	movs	r3, #0
 8002c32:	4604      	mov	r4, r0
 8002c34:	4608      	mov	r0, r1
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	f7fe fe79 	bl	800192e <_close>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d102      	bne.n	8002c46 <_close_r+0x1a>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	b103      	cbz	r3, 8002c46 <_close_r+0x1a>
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	200001d4 	.word	0x200001d4

08002c4c <_fstat_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d07      	ldr	r5, [pc, #28]	; (8002c6c <_fstat_r+0x20>)
 8002c50:	2300      	movs	r3, #0
 8002c52:	4604      	mov	r4, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	602b      	str	r3, [r5, #0]
 8002c5a:	f7fe fe74 	bl	8001946 <_fstat>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	d102      	bne.n	8002c68 <_fstat_r+0x1c>
 8002c62:	682b      	ldr	r3, [r5, #0]
 8002c64:	b103      	cbz	r3, 8002c68 <_fstat_r+0x1c>
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200001d4 	.word	0x200001d4

08002c70 <_isatty_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4d06      	ldr	r5, [pc, #24]	; (8002c8c <_isatty_r+0x1c>)
 8002c74:	2300      	movs	r3, #0
 8002c76:	4604      	mov	r4, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	f7fe fe73 	bl	8001966 <_isatty>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_isatty_r+0x1a>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_isatty_r+0x1a>
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	200001d4 	.word	0x200001d4

08002c90 <_lseek_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d07      	ldr	r5, [pc, #28]	; (8002cb0 <_lseek_r+0x20>)
 8002c94:	4604      	mov	r4, r0
 8002c96:	4608      	mov	r0, r1
 8002c98:	4611      	mov	r1, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fe fe6c 	bl	800197c <_lseek>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_lseek_r+0x1e>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_lseek_r+0x1e>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	200001d4 	.word	0x200001d4

08002cb4 <__malloc_lock>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	; (8002cbc <__malloc_lock+0x8>)
 8002cb6:	f7ff bb5f 	b.w	8002378 <__retarget_lock_acquire_recursive>
 8002cba:	bf00      	nop
 8002cbc:	200001cc 	.word	0x200001cc

08002cc0 <__malloc_unlock>:
 8002cc0:	4801      	ldr	r0, [pc, #4]	; (8002cc8 <__malloc_unlock+0x8>)
 8002cc2:	f7ff bb5a 	b.w	800237a <__retarget_lock_release_recursive>
 8002cc6:	bf00      	nop
 8002cc8:	200001cc 	.word	0x200001cc

08002ccc <_read_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4d07      	ldr	r5, [pc, #28]	; (8002cec <_read_r+0x20>)
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4608      	mov	r0, r1
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	602a      	str	r2, [r5, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f7fe fe0a 	bl	80018f4 <_read>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_read_r+0x1e>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_read_r+0x1e>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	200001d4 	.word	0x200001d4

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
